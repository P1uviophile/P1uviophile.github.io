<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>防止JWT的token被盗用后无限续杯的刷新方案</title>
      <link href="/2024/07/17/JWT-Token%E9%98%B2%E6%AD%A2token%E8%A2%AB%E7%9B%97%E7%94%A8%E7%9A%84%E5%88%B7%E6%96%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2024/07/17/JWT-Token%E9%98%B2%E6%AD%A2token%E8%A2%AB%E7%9B%97%E7%94%A8%E7%9A%84%E5%88%B7%E6%96%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>写一个refreshToken接口</p><ol><li>refreshToken接口: 查询用户状态是否被冻结 如果被冻结则不返回新token 正常则返回新Token</li><li>前端获取token过期的返回信息后调用refreshToken接口获取新token, 获取不到新token则返回登录界面并删除cookie中的token</li><li>用户更改密码后将用户账号冻结一段时间(即token的有效时间) 同时在消息队列推送解封事件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录 3</title>
      <link href="/2024/07/14/%E5%88%B7%E9%A2%983/"/>
      <url>/2024/07/14/%E5%88%B7%E9%A2%983/</url>
      
        <content type="html"><![CDATA[<h2 id="7-14"><a href="#7-14" class="headerlink" title="7.14"></a>7.14</h2><h3 id="42-接雨水-力扣（LeetCode）"><a href="#42-接雨水-力扣（LeetCode）" class="headerlink" title="42. 接雨水 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/trapping-rain-water/description/?envType=study-plan-v2&envId=top-interview-150">42. 接雨水 - 力扣（LeetCode）</a></h3><p>双指针dp 说真的想不到能这样dp 左dp一遍最高右遍历一遍最高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []dpL=<span class="keyword">new</span> <span class="title class_">int</span>[height.length],dpR = <span class="keyword">new</span> <span class="title class_">int</span>[height.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;dpL[<span class="number">0</span>] = height[<span class="number">0</span>];dpR[height.length-<span class="number">1</span>] = height[height.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;height.length;i++) dpL[i]=Math.max(dpL[i-<span class="number">1</span>],height[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=height.length-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--) dpR[i]=Math.max(dpR[i+<span class="number">1</span>],height[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;height.length;i++) ans+=Math.min(dpL[i],dpR[i])-height[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有更优的双指针加dp解法 因为两个dp都只用维护一个最大值 证明公式后可以用双指针dp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, leftMax = height[<span class="number">0</span>], rightMax=height[height.length-<span class="number">1</span>], left = <span class="number">0</span> ,right = height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            leftMax = Math.max(leftMax,height[left]);</span><br><span class="line">            rightMax = Math.max(rightMax,height[right]);</span><br><span class="line">            <span class="keyword">if</span>(leftMax&lt;rightMax)&#123;</span><br><span class="line">                ans+=leftMax-height[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=rightMax-height[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="135-分发糖果-力扣（LeetCode）"><a href="#135-分发糖果-力扣（LeetCode）" class="headerlink" title="135. 分发糖果 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/candy/description/?envType=study-plan-v2&envId=top-interview-150">135. 分发糖果 - 力扣（LeetCode）</a></h3><p>和上题差不多的左右两次dp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []dpL=<span class="keyword">new</span> <span class="title class_">int</span>[ratings.length],dpR = <span class="keyword">new</span> <span class="title class_">int</span>[ratings.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span><span class="number">0</span> ; dpL[<span class="number">0</span>] = <span class="number">1</span>;dpR[ratings.length-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;ratings.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i-<span class="number">1</span>])</span><br><span class="line">                dpL[i] = dpL[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dpL[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=ratings.length-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i+<span class="number">1</span>])</span><br><span class="line">                dpR[i] = dpR[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dpR[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ratings.length;i++)&#123;</span><br><span class="line">            ans += Math.max(dpR[i],dpL[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="739-每日温度-力扣（LeetCode）"><a href="#739-每日温度-力扣（LeetCode）" class="headerlink" title="739. 每日温度 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/daily-temperatures/description/?envType=study-plan-v2&envId=leetcode-75">739. 每日温度 - 力扣（LeetCode）</a></h3><p>第一次做单调栈 执行时间有点惨哦 227ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; index = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(),value = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> []ans = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temperatures.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!value.empty()&amp;&amp;temperatures[i]&gt;value.peek())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t_index</span> <span class="operator">=</span> index.pop();</span><br><span class="line">                ans[t_index] = i-t_index;</span><br><span class="line">                value.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            value.push(temperatures[i]);</span><br><span class="line">            index.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微改了一下 用了一个数组栈 168ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        Stack&lt;<span class="type">int</span>[]&gt; index = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> []ans = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temperatures.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!index.empty()&amp;&amp;temperatures[i]&gt;index.peek()[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="type">int</span>[] t_index = index.pop();</span><br><span class="line">                ans[t_index[<span class="number">1</span>]] = i-t_index[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            index.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;temperatures[i],i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哦牛皮 原来别人比我快了将近7倍只是因为他们用了Deque是吧 那是真的牛皮 23ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; index = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> []ans = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temperatures.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!index.isEmpty()&amp;&amp;temperatures[i]&gt;index.peek()[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="type">int</span>[] t_index = index.pop();</span><br><span class="line">                ans[t_index[<span class="number">1</span>]] = i-t_index[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            index.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;temperatures[i],i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-15"><a href="#7-15" class="headerlink" title="7.15"></a>7.15</h2><h3 id="1768-交替合并字符串-力扣（LeetCode）"><a href="#1768-交替合并字符串-力扣（LeetCode）" class="headerlink" title="1768. 交替合并字符串 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/merge-strings-alternately/description/?envType=study-plan-v2&envId=leetcode-75">1768. 交替合并字符串 - 力扣（LeetCode）</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mergeAlternately</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> word1.length(),len2 = word2.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;Math.min(len1,len2);i++)&#123;</span><br><span class="line">            ans.append(word1.charAt(i));</span><br><span class="line">            ans.append(word2.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len1&lt;len2) ans.append(word2.substring(len1));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len2&lt;len1) ans.append(word1.substring(len2));</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1071-字符串的最大公因子-力扣（LeetCode）"><a href="#1071-字符串的最大公因子-力扣（LeetCode）" class="headerlink" title="1071. 字符串的最大公因子 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/description/?envType=study-plan-v2&envId=leetcode-75">1071. 字符串的最大公因子 - 力扣（LeetCode）</a></h3><p>这是简单题?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">gcdOfStrings</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> str1.length(),len2 = str2.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=Math.min(len1,len2);i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(len1%i==<span class="number">0</span>&amp;&amp;len2%i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> str1.substring(<span class="number">0</span>,i);</span><br><span class="line">                <span class="keyword">if</span>(check(str1,s)&amp;&amp;check(str2,s)) <span class="keyword">return</span> s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String s1,String s2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s1.length()/s2.length();</span><br><span class="line">        <span class="keyword">return</span> s2.repeat(len).equals(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>辗转相除法(gcd)优化 <a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/solutions/143956/zi-fu-chuan-de-zui-da-gong-yin-zi-by-leetcode-solu">数学证明</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">gcdOfStrings</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!str1.concat(str2).equals(str2.concat(str1))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str1.substring(<span class="number">0</span>, gcd(str1.length(), str2.length()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> a % b;</span><br><span class="line">        <span class="keyword">while</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">            a = b;</span><br><span class="line">            b = remainder;</span><br><span class="line">            remainder = a % b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1431-拥有最多糖果的孩子-力扣（LeetCode）"><a href="#1431-拥有最多糖果的孩子-力扣（LeetCode）" class="headerlink" title="1431. 拥有最多糖果的孩子 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies/description/?envType=study-plan-v2&envId=leetcode-75">1431. 拥有最多糖果的孩子 - 力扣（LeetCode）</a></h3><p>三目运算符好像比Math.max快?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Boolean&gt; <span class="title function_">kidsWithCandies</span><span class="params">(<span class="type">int</span>[] candies, <span class="type">int</span> extraCandies)</span> &#123;</span><br><span class="line">        List&lt;Boolean&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> candy:candies) max = max&gt;candy?max:candy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> candy:candies) ans.add(candy+extraCandies&gt;=max);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="605-种花问题-力扣（LeetCode）"><a href="#605-种花问题-力扣（LeetCode）" class="headerlink" title="605. 种花问题 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/can-place-flowers/description/?envType=study-plan-v2&envId=leetcode-75">605. 种花问题 - 力扣（LeetCode）</a></h3><p>要注意边界条件的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPlaceFlowers</span><span class="params">(<span class="type">int</span>[] flowerbed, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(flowerbed.length==<span class="number">1</span>) <span class="keyword">return</span> flowerbed[<span class="number">0</span>]!=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flowerbed[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;flowerbed[<span class="number">1</span>]==<span class="number">0</span>) flowerbed[<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;flowerbed.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flowerbed[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flowerbed[i-<span class="number">1</span>]==-<span class="number">1</span>) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">if</span>(ans&gt;=n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flowerbed[i-<span class="number">1</span>]==<span class="number">0</span>) flowerbed[i]=-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flowerbed[flowerbed.length-<span class="number">1</span>]==-<span class="number">1</span>) ans++;</span><br><span class="line">        <span class="keyword">return</span> ans&gt;=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="345-反转字符串中的元音字母-力扣（LeetCode）"><a href="#345-反转字符串中的元音字母-力扣（LeetCode）" class="headerlink" title="345. 反转字符串中的元音字母 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/reverse-vowels-of-a-string/description/?envType=study-plan-v2&envId=leetcode-75">345. 反转字符串中的元音字母 - 力扣（LeetCode）</a></h3><p>又一次提醒我用set和hashmap会有多慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseVowels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//Set&lt;Character&gt; set = new HashSet&lt;&gt;(List.of(new Character[]&#123;&#x27;a&#x27;, &#x27;e&#x27;, &#x27;i&#x27;, &#x27;o&#x27;, &#x27;u&#x27;,&#x27;A&#x27;, &#x27;E&#x27;, &#x27;I&#x27;, &#x27;O&#x27;, &#x27;U&#x27;&#125;));</span></span><br><span class="line">        <span class="type">int</span> [] indexes = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">chars</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">            <span class="comment">//if(set.contains(chars.charAt(i)))</span></span><br><span class="line">            <span class="keyword">if</span>(isVowel(chars.charAt(i)))&#123;</span><br><span class="line">                indexes[index] = i;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            ch = chars.charAt(indexes[i]);</span><br><span class="line">            chars.setCharAt(indexes[i],chars.charAt(indexes[index-i-<span class="number">1</span>]));</span><br><span class="line">            chars.setCharAt(indexes[index-i-<span class="number">1</span>],ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chars.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">&#x27;a&#x27;</span> || ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;i&#x27;</span> || ch == <span class="string">&#x27;o&#x27;</span> || ch == <span class="string">&#x27;u&#x27;</span> || ch == <span class="string">&#x27;A&#x27;</span> || ch == <span class="string">&#x27;E&#x27;</span> || ch == <span class="string">&#x27;I&#x27;</span> || ch == <span class="string">&#x27;O&#x27;</span> || ch == <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哎 我想了一下用双指针应该更快点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseVowels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r = s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> isVowel(chars[l]),flag2 = isVowel(chars[r]);</span><br><span class="line">            <span class="keyword">if</span>(flag1&amp;&amp;flag2)&#123;</span><br><span class="line">                swap(chars,l,r);l++;r--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag1) r--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (flag2) l++;</span><br><span class="line">            <span class="keyword">else</span> &#123;r--;l++;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(chars);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">&#x27;a&#x27;</span> || ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;i&#x27;</span> || ch == <span class="string">&#x27;o&#x27;</span> || ch == <span class="string">&#x27;u&#x27;</span> || ch == <span class="string">&#x27;A&#x27;</span> || ch == <span class="string">&#x27;E&#x27;</span> || ch == <span class="string">&#x27;I&#x27;</span> || ch == <span class="string">&#x27;O&#x27;</span> || ch == <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] cs, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> cs[l];</span><br><span class="line">        cs[l] = cs[r];</span><br><span class="line">        cs[r] = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3ms -&gt; 2ms</p><h3 id="334-递增的三元子序列-力扣（LeetCode）"><a href="#334-递增的三元子序列-力扣（LeetCode）" class="headerlink" title="334. 递增的三元子序列 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/increasing-triplet-subsequence/description/?envType=study-plan-v2&envId=leetcode-75">334. 递增的三元子序列 - 力扣（LeetCode）</a></h3><p>我想的是记录最大最小值, 结果普通地记录最小次小值就好了…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大最小</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">increasingTriplet</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []dpL=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length],dpR= <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE,max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">            min = Math.min(nums[i], min);</span><br><span class="line">            dpL[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=nums.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            max = Math.max(nums[i], max);</span><br><span class="line">            dpR[i] = max;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;dpL[i]&amp;&amp;nums[i]&lt;dpR[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小次小</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">increasingTriplet</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> nums[<span class="number">0</span>],bigMin = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;min&amp;&amp;num&lt;bigMin) bigMin=num;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(min&gt;num) min = num;<span class="comment">//这里bigMin不用重新赋值 因为大于bigMin肯定大于之前的min</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;bigMin) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="443-压缩字符串-力扣（LeetCode）"><a href="#443-压缩字符串-力扣（LeetCode）" class="headerlink" title="443. 压缩字符串 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/string-compression/description/?envType=study-plan-v2&envId=leetcode-75">443. 压缩字符串 - 力扣（LeetCode）</a></h3><p>这种题除了各种条件判断写着烦没别的了 一点乐趣也没有 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compress</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>,slow = fast,ansLen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast&lt;chars.length)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> chars[fast++];</span><br><span class="line">            <span class="keyword">while</span>(fast&lt;chars.length&amp;&amp;ch==chars[fast])&#123;</span><br><span class="line">                fast++;len++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">                chars[slow++]=ch;ansLen++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                chars[slow++]=ch;chars[slow++]= (<span class="type">char</span>) (len+<span class="string">&#x27;0&#x27;</span>);ansLen+=<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                chars[slow++]=ch;ansLen++;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(len);</span><br><span class="line">                <span class="type">char</span> [] cLen = str.toCharArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c:cLen)&#123;</span><br><span class="line">                    chars[slow++]=c;ansLen++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-17"><a href="#7-17" class="headerlink" title="7.17"></a>7.17</h2><h3 id="1679-K-和数对的最大数目-力扣（LeetCode）"><a href="#1679-K-和数对的最大数目-力扣（LeetCode）" class="headerlink" title="1679. K 和数对的最大数目 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/max-number-of-k-sum-pairs/description/?envType=study-plan-v2&envId=leetcode-75">1679. K 和数对的最大数目 - 力扣（LeetCode）</a></h3><p>快排加双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>, r = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]+nums[r]==k) &#123;</span><br><span class="line">                ans++;++l;--r;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[l]+nums[r]&lt;k)&#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                --r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改了一下快了2ms 据我分析应该是因为不等于k的情况比等于k的情况多很多 所以每次循环少了不少判断 还有用num记录nums[l]+nums[r] 这样就只用计算一次相加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>, r = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[l]+nums[r];</span><br><span class="line">            <span class="keyword">if</span>(num&lt;k) &#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;k)&#123;</span><br><span class="line">                --r;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans++;++l;--r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1456-定长子串中元音的最大数目-力扣（LeetCode）"><a href="#1456-定长子串中元音的最大数目-力扣（LeetCode）" class="headerlink" title="1456. 定长子串中元音的最大数目 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/description/?envType=study-plan-v2&envId=leetcode-75">1456. 定长子串中元音的最大数目 - 力扣（LeetCode）</a></h3><p>第一次提交的时候看错题了(￣_￣|||)</p><p>先计算前k个字符串然后dp ans等于k时就返回结果减少计算量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">char</span> [] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, len = s.length();</span><br><span class="line">        dp[<span class="number">0</span>] = isTarget(chars[<span class="number">0</span>])?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">            dp[i]= isTarget(chars[i])?dp[i-<span class="number">1</span>]+<span class="number">1</span>:dp[i-<span class="number">1</span>];</span><br><span class="line">        &#125;ans = Math.max(ans,dp[k-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(ans==k)<span class="keyword">return</span> k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> dp[i-<span class="number">1</span>]- (isTarget(chars[i-k])?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            dp[i]= isTarget(chars[i])?num +<span class="number">1</span>:num;</span><br><span class="line">            ans = Math.max(ans,dp[i]);</span><br><span class="line">            <span class="keyword">if</span>(ans==k)<span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTarget</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">&#x27;a&#x27;</span>||ch==<span class="string">&#x27;e&#x27;</span>||ch==<span class="string">&#x27;i&#x27;</span>||ch==<span class="string">&#x27;o&#x27;</span>||ch==<span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看别人的代码又学到一招 真是为了优化无所不用其极啊 用数组存储元音字母 判断速度更快11ms -&gt; 5ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Arrays.fill(cnt,<span class="number">0</span>);</span><br><span class="line">        cnt[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;e&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;i&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;o&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;u&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">char</span> [] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, len = s.length();</span><br><span class="line">        dp[<span class="number">0</span>] = cnt[chars[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">            dp[i]= dp[i-<span class="number">1</span>]+cnt[chars[i]];</span><br><span class="line">        &#125;ans = Math.max(ans,dp[k-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(ans==k)<span class="keyword">return</span> k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> dp[i-<span class="number">1</span>]- cnt[chars[i-k]];</span><br><span class="line">            dp[i]= num + cnt[chars[i]];</span><br><span class="line">            ans = Math.max(ans,dp[i]);</span><br><span class="line">            <span class="keyword">if</span>(ans==k)<span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进一步! 因为这个dp只用记录最大值 所以可以用一个滑动窗口的最大值代替dp数组 dp 不需要了5ms -&gt; 4ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        cnt[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;e&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;i&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;o&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="string">&#x27;u&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> [] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, len = s.length();</span><br><span class="line">        ans += cnt[chars[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">            ans += cnt[chars[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans==k)<span class="keyword">return</span> k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;len;i++)&#123;</span><br><span class="line">            sum += - cnt[chars[i-k]] + cnt[chars[i]];</span><br><span class="line">            ans = Math.max(ans,sum);</span><br><span class="line">            <span class="keyword">if</span>(ans==k)<span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="643-子数组最大平均数-I-力扣（LeetCode）"><a href="#643-子数组最大平均数-I-力扣（LeetCode）" class="headerlink" title="643. 子数组最大平均数 I - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/maximum-average-subarray-i/description/?envType=study-plan-v2&envId=leetcode-75">643. 子数组最大平均数 I - 力扣（LeetCode）</a></h3><p>和上题差不多的滑动窗口 简单但是优化空间似乎很大?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">double</span> ans , sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        ans = sum/k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">            sum += -nums[i-k] + nums[i];</span><br><span class="line">            ans = Math.max(ans,sum/k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哦 阿西吧 没必要更新最大值的时候算平均数的 最后把最大和除一下就行5ms-&gt;2ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ans,sum = <span class="number">0</span>,len = nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        ans = sum/k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;len;i++)&#123;</span><br><span class="line">            sum += -nums[i-k] + nums[i];</span><br><span class="line">            ans = Math.max(ans,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) ans /k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-18"><a href="#7-18" class="headerlink" title="7.18"></a>7.18</h2><h3 id="1004-最大连续1的个数-III-力扣（LeetCode）"><a href="#1004-最大连续1的个数-III-力扣（LeetCode）" class="headerlink" title="1004. 最大连续1的个数 III - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/description/?envType=study-plan-v2&envId=leetcode-75">1004. 最大连续1的个数 III - 力扣（LeetCode）</a></h3><p>之前没写过这种滑动窗口长度可变的题 一开始写的时候用定长滑动窗口一直写不出来 看了题解发现其实很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> len=nums.length,zero = <span class="number">0</span>,sum=<span class="number">0</span>,ans=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">0</span>;r&lt;len;r++)&#123;</span><br><span class="line">            zero+=nums[r]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            sum+=nums[r];</span><br><span class="line">            <span class="keyword">while</span>(zero&gt;k)&#123;</span><br><span class="line">                l++;zero-=nums[l]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;sum-=nums[l];</span><br><span class="line">            &#125;</span><br><span class="line">            ans=Math.max(ans,zero+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1493-删掉一个元素以后全为-1-的最长子数组-力扣（LeetCode）"><a href="#1493-删掉一个元素以后全为-1-的最长子数组-力扣（LeetCode）" class="headerlink" title="1493. 删掉一个元素以后全为 1 的最长子数组 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element/description/?envType=study-plan-v2&envId=leetcode-75">1493. 删掉一个元素以后全为 1 的最长子数组 - 力扣（LeetCode）</a></h3><p>跟上题思路差不多的可变滑动窗口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> len=nums.length,zero = <span class="number">0</span>,sum=<span class="number">0</span>,ans=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">0</span>;r&lt;len;r++)&#123;</span><br><span class="line">            zero+=nums[r]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            sum+=nums[r];</span><br><span class="line">            <span class="keyword">while</span>(zero&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                zero-=nums[l]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;sum-=nums[l];l++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=Math.max(ans,sum+zero-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化: 不需要维护sum 三元运算符换成if判断更快</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> len=nums.length,zero = <span class="number">0</span>,ans=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">0</span>;r&lt;len;r++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[r]==<span class="number">0</span>) ++zero;</span><br><span class="line">            <span class="keyword">while</span>(zero&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[l++]==<span class="number">0</span>) --zero;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=Math.max(ans,r-l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1732-找到最高海拔-力扣（LeetCode）"><a href="#1732-找到最高海拔-力扣（LeetCode）" class="headerlink" title="1732. 找到最高海拔 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-the-highest-altitude/description/?envType=study-plan-v2&envId=leetcode-75">1732. 找到最高海拔 - 力扣（LeetCode）</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestAltitude</span><span class="params">(<span class="type">int</span>[] gain)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> gain.length,ans=<span class="number">0</span>,h=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            h+=gain[i-<span class="number">1</span>];</span><br><span class="line">            ans=Math.max(ans,h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-19"><a href="#7-19" class="headerlink" title="7.19"></a>7.19</h2><h3 id="724-寻找数组的中心下标-力扣（LeetCode）"><a href="#724-寻找数组的中心下标-力扣（LeetCode）" class="headerlink" title="724. 寻找数组的中心下标 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-pivot-index/submissions/547961233/?envType=study-plan-v2&envId=leetcode-75">724. 寻找数组的中心下标 - 力扣（LeetCode）</a></h3><p>维护一个前缀和一个后缀和 三次遍历 应该还有挺大优化空间的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> []left = <span class="keyword">new</span> <span class="title class_">int</span>[len],right = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++) left[i]=left[i-<span class="number">1</span>]+nums[i-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--) right[i]=right[i+<span class="number">1</span>]+nums[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="keyword">if</span>(left[i]==right[i])<span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来如此 计算数组总和就行了 维护前后缀和是在计算复杂的时候(比如乘除之类的)才用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>,curSum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums) sum+=num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            curSum+=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum-curSum==curSum-nums[i]) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> DP </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录 2</title>
      <link href="/2024/07/07/%E5%88%B7%E9%A2%982/"/>
      <url>/2024/07/07/%E5%88%B7%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h2 id="7-7"><a href="#7-7" class="headerlink" title="7.7"></a>7.7</h2><h3 id="433-最小基因变化-力扣（LeetCode）"><a href="#433-最小基因变化-力扣（LeetCode）" class="headerlink" title="433. 最小基因变化 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/minimum-genetic-mutation/description/?envType=study-plan-v2&envId=top-interview-150">433. 最小基因变化 - 力扣（LeetCode）</a></h3><p>图的广度优先遍历的题大多都是用队列存储每轮搜索到的结点,再用一个visited记录已经搜索过的结点 理解了其实思路都差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMutation</span><span class="params">(String startGene, String endGene, String[] bank)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startGene.equals(endGene)) &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        Set&lt;String&gt; bankSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(Arrays.asList(bank));</span><br><span class="line">        <span class="keyword">if</span> (!bankSet.contains(endGene)) &#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="type">char</span>[] keys = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;T&#x27;</span>&#125;;</span><br><span class="line">        bankSet.add(startGene);</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(startGene);</span><br><span class="line">        visited.add(startGene);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">gene</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(keys[k]!=gene.charAt(j))&#123;</span><br><span class="line">                            <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(gene);</span><br><span class="line">                            s.setCharAt(j,keys[k]);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.toString();</span><br><span class="line">                            <span class="keyword">if</span>(!visited.contains(str)&amp;&amp;bankSet.contains(str))&#123;</span><br><span class="line">                                <span class="keyword">if</span>(s.toString().equals(endGene)) <span class="keyword">return</span> ans;</span><br><span class="line">                                visited.add(str);</span><br><span class="line">                                queue.add(str);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="127-单词接龙-力扣（LeetCode）"><a href="#127-单词接龙-力扣（LeetCode）" class="headerlink" title="127. 单词接龙 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/word-ladder/description/?envType=study-plan-v2&envId=top-interview-150">127. 单词接龙 - 力扣（LeetCode）</a></h3><p>感觉和上一道题差不多 字符串的长度和keys不一样而已</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (beginWord.equals(endWord)) &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        Set&lt;String&gt; bankSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(wordList);</span><br><span class="line">        <span class="keyword">if</span> (!bankSet.contains(endWord)) &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="type">char</span>[] keys = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;keys[i] = (<span class="type">char</span>) (<span class="string">&#x27;a&#x27;</span>+i);&#125;</span><br><span class="line">        bankSet.add(beginWord);</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(beginWord);</span><br><span class="line">        visited.add(beginWord);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">gene</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;gene.length();j++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(keys[k]!=gene.charAt(j))&#123;</span><br><span class="line">                            <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(gene);</span><br><span class="line">                            s.setCharAt(j,keys[k]);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.toString();</span><br><span class="line">                            <span class="keyword">if</span>(!visited.contains(str)&amp;&amp;bankSet.contains(str))&#123;</span><br><span class="line">                                <span class="keyword">if</span>(s.toString().equals(endWord)) <span class="keyword">return</span> ans;</span><br><span class="line">                                visited.add(str);</span><br><span class="line">                                queue.add(str);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个优化搜索空间的方法: 双向BFS 简单来说就是两个队列分别从起点和终点双向bfs 当访问到已经被访问过的结点就说明遍历到了 这有三叶姐的说明: <a href="https://leetcode.cn/problems/word-ladder/solutions/831894/gong-shui-san-xie-ru-he-shi-yong-shuang-magjd/?envType=study-plan-v2&envId=top-interview-150">127. 单词接龙 - 力扣（LeetCode）</a></p><h3 id="70-爬楼梯-力扣（LeetCode）"><a href="#70-爬楼梯-力扣（LeetCode）" class="headerlink" title="70. 爬楼梯 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/climbing-stairs/description/?envType=study-plan-v2&envId=top-interview-150">70. 爬楼梯 - 力扣（LeetCode）</a></h3><p>最简单的动态规划 每级台阶 &#x3D; 前一级台阶走一步 + 前前一级台阶走两步 也就是前一级台阶的方法数加前前一级台阶的方法数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> step1=<span class="number">1</span>,step2=<span class="number">2</span>;<span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag) step1 += step2;</span><br><span class="line">                <span class="keyword">else</span> step2+=step1;</span><br><span class="line">                flag = !flag;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Math.max(step1, step2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="198-打家劫舍-力扣（LeetCode）"><a href="#198-打家劫舍-力扣（LeetCode）" class="headerlink" title="198. 打家劫舍 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/house-robber/description/?envType=study-plan-v2&envId=top-interview-150">198. 打家劫舍 - 力扣（LeetCode）</a></h3><p>根据前两家是否被打劫和到前两家最多能打劫多少决定目前这家要不要打劫 因为只需要关注两家所以可以用队列 list也可以不过空间和维护有一个会比较差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums.length==<span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; dp = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> []one = &#123;nums[<span class="number">0</span>],<span class="number">0</span>&#125;,two = &#123;Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]),nums[<span class="number">0</span>]&gt;nums[<span class="number">1</span>]?<span class="number">0</span>:<span class="number">1</span>&#125;;</span><br><span class="line">        dp.add(one);dp.add(two);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span>[] ll = dp.remove(),l = dp.peek();</span><br><span class="line">            <span class="type">int</span> maxLL=ll[<span class="number">0</span>]+nums[i],maxL;</span><br><span class="line">            <span class="keyword">if</span>(l[<span class="number">1</span>]==<span class="number">1</span>)maxL = l[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> maxL = l[<span class="number">0</span>]+nums[i];</span><br><span class="line">            <span class="keyword">if</span>(maxLL&gt;maxL)&#123;</span><br><span class="line">                ll[<span class="number">0</span>] = maxLL;ll[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                dp.add(ll);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ll[<span class="number">0</span>]=maxL;ll[<span class="number">1</span>]=l[<span class="number">1</span>]==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">                dp.add(ll);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp.remove();</span><br><span class="line">        <span class="keyword">return</span> dp.remove()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="139-单词拆分-力扣（LeetCode）"><a href="#139-单词拆分-力扣（LeetCode）" class="headerlink" title="139. 单词拆分 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/word-break/description/?envType=study-plan-v2&envId=top-interview-150">139. 单词拆分 - 力扣（LeetCode）</a></h3><p>我写的是BFS解, 用动态规划和DFS也能解, set记忆访问过的字符串剪枝搜索空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;String&gt; dp = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dp.add(s);set.add(s);</span><br><span class="line">        <span class="keyword">while</span>(!dp.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; dp.size();i++)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sss</span> <span class="operator">=</span> dp.remove();</span><br><span class="line">                <span class="keyword">for</span>(String str:wordDict)&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> sss;</span><br><span class="line">                    <span class="keyword">if</span>(str.length()&lt;=ss.length()&amp;&amp;str.equals(ss.substring(<span class="number">0</span>,str.length()))&amp;&amp;!set.contains(ss.substring(str.length())))&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ss.substring(str.length()).equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        dp.add(ss.substring(str.length()));set.add(ss.substring(str.length()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又写了个动态规划版本的 不过时间复杂度和空间都不如BFS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; words = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(wordDict);</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=i;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">0</span>||dp[k-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(k,i+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(words.contains(str))&#123;</span><br><span class="line">                        dp[i] = <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-8"><a href="#7-8" class="headerlink" title="7.8"></a>7.8</h2><h3 id="322-零钱兑换-力扣（LeetCode）"><a href="#322-零钱兑换-力扣（LeetCode）" class="headerlink" title="322. 零钱兑换 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/coin-change/description/?envType=study-plan-v2&envId=top-interview-150">322. 零钱兑换 - 力扣（LeetCode）</a></h3><p>dp 边界条件不好弄 该换数组初始值时就换 不然又要加一堆条件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//辣鸡 一堆条件判断 时间损失还大</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(amount==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(coins.length==<span class="number">1</span>) <span class="keyword">return</span> amount%coins[<span class="number">0</span>]==<span class="number">0</span>?amount/coins[<span class="number">0</span>]:-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> [] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=amount;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;coins.length;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-coins[k]==<span class="number">0</span>||(i-coins[k]&gt;<span class="number">0</span>&amp;&amp;dp[i-coins[k]]!=<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span>(dp[i]==<span class="number">0</span>)</span><br><span class="line">                        dp[i]=dp[i-coins[k]]+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i]=Math.min(dp[i-coins[k]]+<span class="number">1</span>,dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount]!=<span class="number">0</span>?dp[amount]:-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置数组初始值 非常好写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> result[] = <span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(result, <span class="number">100_000</span>);</span><br><span class="line">        result[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class="line">                result[i] = Math.min(result[i], result[i - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result[amount] != <span class="number">100_000</span> ? result[amount] : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="300-最长递增子序列-力扣（LeetCode）"><a href="#300-最长递增子序列-力扣（LeetCode）" class="headerlink" title="300. 最长递增子序列 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/?envType=study-plan-v2&envId=top-interview-150">300. 最长递增子序列 - 力扣（LeetCode）</a></h3><p>dp 无语了 提交一看一堆人比我快几十毫秒 一看算法好像也没有优化很多啊? 一运行才发现原来数据集改过了😅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        Arrays.fill(dp,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[k]&lt;nums[i])</span><br><span class="line">                    dp[i] = Math.max(dp[k]+<span class="number">1</span>,dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(dp[i],ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种dp+二分查找的解法 时间复杂度O(N*logN) 普通dp是O(N^2) 比较好的说明:<a href="https://writings.sh/post/longest-increasing-subsequence-revisited">最长递增子序列（nlogn 二分法、DAG 模型 和 延伸问题） | 春水煎茶 (writings.sh)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//用来存储所有长度递增子序列的最小尾值</span></span><br><span class="line">        <span class="type">int</span>[] tails = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//记录最长递增子序列的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = res;</span><br><span class="line">            <span class="comment">//二分查找</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(tails[m] &lt; num) i = m + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> j = m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新下标为i的位置的元素为num</span></span><br><span class="line">            tails[i] = num;</span><br><span class="line">            <span class="comment">//如果当前的j == res说明，num 被添加到 tails 数组的最后</span></span><br><span class="line">            <span class="comment">//res加一</span></span><br><span class="line">            <span class="keyword">if</span>(res == j) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="215-数组中的第K个最大元素-力扣（LeetCode）"><a href="#215-数组中的第K个最大元素-力扣（LeetCode）" class="headerlink" title="215. 数组中的第K个最大元素 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/description/?envType=study-plan-v2&envId=top-interview-150">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></h3><p>自己写的用了大顶堆 时间复杂度O(Nlogk) 能过但是没到题目要求的O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//将大顶堆大小定义为k，并重写类函数</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(k, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer a, Integer b)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> b - a;<span class="comment">//大顶堆：参数2-参数1；小顶堆：参数1-参数2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums) queue.add(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k-<span class="number">1</span>;i++) queue.remove();</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了别人的题解 可以用桶排序 完美符合题目要求的O(N) <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solutions/307351/shu-zu-zhong-de-di-kge-zui-da-yuan-su-by-leetcode-/comments/2216100">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            buckets[nums[i] + <span class="number">10000</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20000</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            k -= buckets[i];</span><br><span class="line">            <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - <span class="number">10000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="108-将有序数组转换为二叉搜索树-力扣（LeetCode）"><a href="#108-将有序数组转换为二叉搜索树-力扣（LeetCode）" class="headerlink" title="108. 将有序数组转换为二叉搜索树 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/description/?envType=study-plan-v2&envId=top-interview-150">108. 将有序数组转换为二叉搜索树 - 力扣（LeetCode）</a></h3><p>简单分治 划分数组为 left mid right 三部分分别建树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fun(nums,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,nums.length-<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">fun</span><span class="params">(<span class="type">int</span> []nums, <span class="type">int</span> []index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index[<span class="number">0</span>]&gt;index[<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(index[<span class="number">0</span>]==index[<span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[index[<span class="number">0</span>]]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (index[<span class="number">0</span>]+index[<span class="number">1</span>])/<span class="number">2</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">        root.left = fun(nums, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;index[<span class="number">0</span>], mid - <span class="number">1</span>&#125;);</span><br><span class="line">        root.right = fun(nums, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;mid + <span class="number">1</span>, index[<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33-搜索旋转排序数组-力扣（LeetCode）"><a href="#33-搜索旋转排序数组-力扣（LeetCode）" class="headerlink" title="33. 搜索旋转排序数组 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150">33. 搜索旋转排序数组 - 力扣（LeetCode）</a></h3><p><img src="https://pic.joking7.com/202407082305968.png" alt="image-20240708230506877"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] == target ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-9"><a href="#7-9" class="headerlink" title="7.9"></a>7.9</h2><h3 id="34-在排序数组中查找元素的第一个和最后一个位置-力扣（LeetCode）"><a href="#34-在排序数组中查找元素的第一个和最后一个位置-力扣（LeetCode）" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/?envType=study-plan-v2&envId=top-interview-150">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></h3><p>三次二分 第一次找到target 第二次找target左边的分界点 第三次找右边的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>]==target?<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;:<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r= nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index1=-<span class="number">1</span>,indexL=-<span class="number">1</span>,indexR=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target) &#123;index1 = mid;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;l = mid+<span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;r = mid-<span class="number">1</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index1==-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        l=<span class="number">0</span>;r=index1;</span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>]==target) indexL=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l+(r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]==target&amp;&amp;nums[mid-<span class="number">1</span>]&lt;target) &#123;indexL = mid;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]&lt;target)&#123;l = mid+<span class="number">1</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;r = mid-<span class="number">1</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        l=index1;r= nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[nums.length-<span class="number">1</span>]==target) indexR=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l+(r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]==target&amp;&amp;nums[mid+<span class="number">1</span>]&gt;target) &#123;indexR = mid;<span class="keyword">break</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid]&lt;=target)&#123;l = mid+<span class="number">1</span>;&#125;<span class="keyword">else</span>&#123;r = mid - <span class="number">1</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;indexL,indexR&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然而实际上只用两次二分就好了 第一次找第一个等于target的 第二次找最后一个等于target的 <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solutions/504484/zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-de-di-3-4/comments/1989894">来源</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 两次二分查找，分开查找第一个和最后一个</span></span><br><span class="line"> <span class="comment">// 时间复杂度 O(log n), 空间复杂度 O(1)</span></span><br><span class="line"> <span class="comment">// [1,2,3,3,3,3,4,5,9]</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span>[] searchRange2(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">   <span class="comment">// 找第一个等于target的位置</span></span><br><span class="line">   <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">if</span> (nums[middle] == target) &#123;</span><br><span class="line">       first = middle;</span><br><span class="line">       right = middle - <span class="number">1</span>; <span class="comment">//重点</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">       right = middle - <span class="number">1</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       left = middle + <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 最后一个等于target的位置</span></span><br><span class="line">   left = <span class="number">0</span>;</span><br><span class="line">   right = nums.length - <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">if</span> (nums[middle] == target) &#123;</span><br><span class="line">       last = middle;</span><br><span class="line">       left = middle + <span class="number">1</span>; <span class="comment">//重点</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">       right = middle - <span class="number">1</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       left = middle + <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;first, last&#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="153-寻找旋转排序数组中的最小值-力扣（LeetCode）"><a href="#153-寻找旋转排序数组中的最小值-力扣（LeetCode）" class="headerlink" title="153. 寻找旋转排序数组中的最小值 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/?envType=study-plan-v2&envId=top-interview-150">153. 寻找旋转排序数组中的最小值 - 力扣（LeetCode）</a></h3><p>又是一道非有序数组用二分的</p><p><img src="https://pic.joking7.com/202407092259153.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (r+l)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//l为断点的情况 直接返回nums[l]</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=nums[l]&amp;&amp;nums[r]&gt;=nums[l]) <span class="keyword">return</span> nums[l];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//为了下面l和r能等于mid 这里加个判断</span></span><br><span class="line">                <span class="keyword">if</span>(r-l==<span class="number">1</span>) <span class="keyword">return</span> Math.min(nums[l],nums[r]);</span><br><span class="line">                <span class="comment">//l不是断点的情况 注意l和r要等于mid mid可能是断点</span></span><br><span class="line">                <span class="keyword">if</span>(nums[mid]&gt;=nums[l])&#123;l=mid;&#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;r=mid;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="373-查找和最小的-K-对数字-力扣（LeetCode）"><a href="#373-查找和最小的-K-对数字-力扣（LeetCode）" class="headerlink" title="373. 查找和最小的 K 对数字 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-k-pairs-with-smallest-sums/description/?envType=study-plan-v2&envId=top-interview-150">373. 查找和最小的 K 对数字 - 力扣（LeetCode）</a></h3><p>一开始暴力 直接爆内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">KY</span>&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        KY(<span class="type">int</span> a,<span class="type">int</span> b)&#123;<span class="built_in">this</span>.a=a;<span class="built_in">this</span>.b=b;value=a+b;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">kSmallestPairs</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;KY&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;KY&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(KY o1, KY o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.value - o2.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">limit1</span> <span class="operator">=</span> Math.min(k,nums1.length),limit2 = Math.min(k,nums2.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;limit1;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;limit2;j++)&#123;</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="title class_">KY</span>(nums1[i],nums2[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;KY ky ;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            ky = queue.remove();</span><br><span class="line">            List&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            nums.add(ky.a);nums.add(ky.b);</span><br><span class="line">            ans.add(nums);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了半天题解才理解是什么意思 简单来说就是一边出一边进 维护一个链表 利用小顶堆的性质每次出的时候就知道下个要进哪两个下标 同时在最开始就把一条链表上的下标队全进堆 比较难理解 下面是链表维护的图解:</p><p>一开始进堆:</p><p><img src="https://pic.joking7.com/202407100041552.png" alt="1642133430-NIIiwX-学生登录用例图 (10)(1)"></p><p>出堆之后有两种可能 因为最小堆的性质不用处理自动就知道是 图1 还是 图2</p><p><img src="https://pic.joking7.com/202407092359645.png" alt="1642133430-NIIiwX-学生登录用例图 (10)(2)"></p><p><img src="https://pic.joking7.com/202407092359093.png" alt="1642133430-NIIiwX-学生登录用例图 (10)(3)"></p><p>以此类推一直出到k个下标对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">kSmallestPairs</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(k, (o1, o2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[o1[<span class="number">0</span>]] + nums2[o1[<span class="number">1</span>]] - nums1[o2[<span class="number">0</span>]] - nums2[o2[<span class="number">1</span>]];</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.min(m, k); i++) &#123;</span><br><span class="line">            queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,<span class="number">0</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k-- &gt; <span class="number">0</span> &amp;&amp; !queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] idxPair = queue.poll();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(nums1[idxPair[<span class="number">0</span>]]);</span><br><span class="line">            list.add(nums2[idxPair[<span class="number">1</span>]]);</span><br><span class="line">            ans.add(list);</span><br><span class="line">            <span class="keyword">if</span> (idxPair[<span class="number">1</span>] + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;idxPair[<span class="number">0</span>], idxPair[<span class="number">1</span>] + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="53-最大子数组和-力扣（LeetCode）"><a href="#53-最大子数组和-力扣（LeetCode）" class="headerlink" title="53. 最大子数组和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/maximum-subarray/description/?envType=study-plan-v2&envId=top-interview-150">53. 最大子数组和 - 力扣（LeetCode）</a></h3><p>一种解法: 简单dp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> []dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+dp[i-<span class="number">1</span>]&gt;nums[i]) dp[i]=nums[i]+dp[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> dp[i] = nums[i];</span><br><span class="line">            ans = Math.max(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种: 分治 也称Kadane 算法 这次官解破天荒的讲得还行 <a href="https://leetcode.cn/problems/maximum-subarray/solutions/228009/zui-da-zi-xu-he-by-leetcode-solution">官解</a></p><p><img src="https://pic.joking7.com/202407100016531.png" alt="image-20240710001649481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> lSum, rSum, mSum, iSum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Status</span><span class="params">(<span class="type">int</span> lSum, <span class="type">int</span> rSum, <span class="type">int</span> mSum, <span class="type">int</span> iSum)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.lSum = lSum;</span><br><span class="line">            <span class="built_in">this</span>.rSum = rSum;</span><br><span class="line">            <span class="built_in">this</span>.mSum = mSum;</span><br><span class="line">            <span class="built_in">this</span>.iSum = iSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getInfo(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>).mSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Status <span class="title function_">getInfo</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Status</span>(a[l], a[l], a[l], a[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">Status</span> <span class="variable">lSub</span> <span class="operator">=</span> getInfo(a, l, m);</span><br><span class="line">        <span class="type">Status</span> <span class="variable">rSub</span> <span class="operator">=</span> getInfo(a, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> pushUp(lSub, rSub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Status <span class="title function_">pushUp</span><span class="params">(Status l, Status r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">iSum</span> <span class="operator">=</span> l.iSum + r.iSum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lSum</span> <span class="operator">=</span> Math.max(l.lSum, l.iSum + r.lSum);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rSum</span> <span class="operator">=</span> Math.max(r.rSum, r.iSum + l.rSum);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mSum</span> <span class="operator">=</span> Math.max(Math.max(l.mSum, r.mSum), l.rSum + r.lSum);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Status</span>(lSum, rSum, mSum, iSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三: 写完下面那道题我才发现 根本不用维护dp数组啊 只要维护一个最大子数组和就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> nums[<span class="number">0</span>], curMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a : nums) &#123;</span><br><span class="line">            curMax = Math.max(curMax + a, a);</span><br><span class="line">            maxSum = Math.max(maxSum, curMax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="918-环形子数组的最大和-力扣（LeetCode）"><a href="#918-环形子数组的最大和-力扣（LeetCode）" class="headerlink" title="918. 环形子数组的最大和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/maximum-sum-circular-subarray/description/?envType=study-plan-v2&envId=top-interview-150">918. 环形子数组的最大和 - 力扣（LeetCode）</a></h3><p>这题解写得真是太牛逼了 比官解强100个官解 <a href="https://leetcode.cn/problems/maximum-sum-circular-subarray/solutions/1152143/wo-hua-yi-bian-jiu-kan-dong-de-ti-jie-ni-892u">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubarraySumCircular</span><span class="params">(<span class="type">int</span>[] A)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>, maxSum = A[<span class="number">0</span>], curMax = <span class="number">0</span>, minSum = A[<span class="number">0</span>], curMin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a : A) &#123;</span><br><span class="line">            curMax = Math.max(curMax + a, a);</span><br><span class="line">            maxSum = Math.max(maxSum, curMax);</span><br><span class="line">            curMin = Math.min(curMin + a, a);</span><br><span class="line">            minSum = Math.min(minSum, curMin);</span><br><span class="line">            total += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum &gt; <span class="number">0</span> ? Math.max(maxSum, total - minSum) : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-10"><a href="#7-10" class="headerlink" title="7.10"></a>7.10</h2><h3 id="17-电话号码的字母组合-力扣（LeetCode）"><a href="#17-电话号码的字母组合-力扣（LeetCode）" class="headerlink" title="17. 电话号码的字母组合 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/?envType=study-plan-v2&envId=top-interview-150">17. 电话号码的字母组合 - 力扣（LeetCode）</a></h3><p>一开始一直想用queue存储 浪费了半天</p><p>有点像深度优先遍历 其实就是StringBuilder用完一个字符之后删掉再用下一个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character, String&gt; phoneMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, String&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        List&lt;Character&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : digits.toCharArray()) queue.add(ch);</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getString(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(),ans,queue,phoneMap,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getString</span><span class="params">(StringBuilder str,List&lt;String&gt; list,List&lt;Character&gt; queue,Map&lt;Character, String&gt; phoneMap,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="type">char</span> []chars = phoneMap.get(queue.get(index)).toCharArray();</span><br><span class="line">        <span class="keyword">if</span>(index==queue.size()-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">                str.append(ch);</span><br><span class="line">                list.add(str.toString());</span><br><span class="line">                str.deleteCharAt(str.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            str.append(ch);</span><br><span class="line">            getString(str,list,queue,phoneMap,index+<span class="number">1</span>);</span><br><span class="line">            str.deleteCharAt(str.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="77-组合-力扣（LeetCode）"><a href="#77-组合-力扣（LeetCode）" class="headerlink" title="77. 组合 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/combinations/description/?envType=study-plan-v2&envId=top-interview-150">77. 组合 - 力扣（LeetCode）</a></h3><p>dfs遍历 话说回溯跟我原来想的不太一样啊 原来回溯是指操作完一个状态之后回溯到上个状态再接着操作啊 我还以为是指递归的回溯呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; combines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; combine = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(combines,combine,n,k);</span><br><span class="line">        <span class="keyword">return</span> combines;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; combines,List&lt;Integer&gt; combine,<span class="type">int</span> n,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n-k&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">                    List&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(combine);</span><br><span class="line">                    nums.add(i);</span><br><span class="line">                    combines.add(nums);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">                combine.add(i);</span><br><span class="line">                dfs(combines,combine,i-<span class="number">1</span>,k-<span class="number">1</span>);</span><br><span class="line">                combine.remove(combine.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="46-全排列-力扣（LeetCode）"><a href="#46-全排列-力扣（LeetCode）" class="headerlink" title="46. 全排列 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/permutations/description/?envType=study-plan-v2&envId=top-interview-150">46. 全排列 - 力扣（LeetCode）</a></h3><p>用了类似上面两题的解法 结果超慢啊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; permutes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; permute = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="type">int</span> k=nums.length;</span><br><span class="line">        dfs(permutes,permute,set,k,nums);</span><br><span class="line">        <span class="keyword">return</span> permutes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set用来记录用了哪些数字 k用来记录还要排列几个数字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; permutes,List&lt;Integer&gt; permute,Set&lt;Integer&gt; set,<span class="type">int</span> k,<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!set.contains(nums[i])) &#123;</span><br><span class="line">                    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(permute);</span><br><span class="line">                    list.add(nums[i]);permutes.add(list);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(nums[i])) &#123;</span><br><span class="line">                permute.add(nums[i]);set.add(nums[i]);</span><br><span class="line">                dfs(permutes,permute,set,k-<span class="number">1</span>,nums);</span><br><span class="line">                permute.remove(permute.size()-<span class="number">1</span>);</span><br><span class="line">                set.remove(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了一下别人的题解 发现问题在我用了set记录用过的数字 改用bool数组直接快一倍 击败96%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; permutes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; permute = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] set = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];<span class="type">int</span> k=nums.length;</span><br><span class="line">        dfs(permutes,permute,set,k,nums);</span><br><span class="line">        <span class="keyword">return</span> permutes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set用来记录用了哪些数字 k用来记录还要排列几个数字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; permutes,List&lt;Integer&gt; permute,<span class="type">boolean</span>[] set,<span class="type">int</span> k,<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!set[i]) &#123;</span><br><span class="line">                    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(permute);</span><br><span class="line">                    list.add(nums[i]);permutes.add(list);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set[i]) &#123;</span><br><span class="line">                permute.add(nums[i]);set[i]=<span class="literal">true</span>;</span><br><span class="line">                dfs(permutes,permute,set,k-<span class="number">1</span>,nums);</span><br><span class="line">                permute.remove(permute.size()-<span class="number">1</span>);</span><br><span class="line">                set[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="39-组合总和-力扣（LeetCode）"><a href="#39-组合总和-力扣（LeetCode）" class="headerlink" title="39. 组合总和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/combination-sum/description/?envType=study-plan-v2&envId=top-interview-150">39. 组合总和 - 力扣（LeetCode）</a></h3><p>又用set写了一个搞笑的解法 时间复杂度O(2^N) 有点绷不住了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; combination = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        find(combinations,combination,<span class="number">0</span>,target,candidates,set);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; combinations,List&lt;Integer&gt; combination,<span class="type">int</span> sum,<span class="type">int</span> target,<span class="type">int</span>[] candidates,Set&lt;String&gt; set)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum==target) &#123;</span><br><span class="line">            List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(combination);</span><br><span class="line">            Collections.sort(list1);</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(list1.toString()))&#123;</span><br><span class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(combination);</span><br><span class="line">                set.add(list1.toString());</span><br><span class="line">                combinations.add(list);<span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum+candidates[i]&lt;=target)&#123;</span><br><span class="line">                combination.add(candidates[i]);</span><br><span class="line">                find(combinations,combination,sum+candidates[i],target,candidates,set);</span><br><span class="line">                combination.remove(combination.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己改了一下 先把nums排序就不用担心录入重复的问题了 找到一个思路和我差不多的题解:<a href="https://leetcode.cn/problems/combination-sum/solutions/14697/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; combinations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; combination = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>,index=<span class="number">0</span>;Arrays.sort(candidates);</span><br><span class="line">        find(combinations,combination,<span class="number">0</span>,target,candidates,index);</span><br><span class="line">        <span class="keyword">return</span> combinations;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; combinations,List&lt;Integer&gt; combination,<span class="type">int</span> sum,<span class="type">int</span> target,<span class="type">int</span>[] candidates,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum==target) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(combination);</span><br><span class="line">            combinations.add(list);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> sum + candidates[i],step = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(curSum&lt;=target)&#123;</span><br><span class="line">                combination.add(candidates[i]);step++;</span><br><span class="line">                find(combinations,combination,curSum,target,candidates,i+<span class="number">1</span>);</span><br><span class="line">                curSum+=candidates[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(step--!=<span class="number">0</span>)&#123;</span><br><span class="line">                combination.remove(combination.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-括号生成-力扣（LeetCode）"><a href="#22-括号生成-力扣（LeetCode）" class="headerlink" title="22. 括号生成 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/generate-parentheses/description/?envType=study-plan-v2&envId=top-interview-150">22. 括号生成 - 力扣（LeetCode）</a></h3><p><img src="https://pic.joking7.com/202407110146816.png" alt="image-20240711014612729"></p><p>为什么有人就是能把代码写得又优雅又简洁 题解还一目了然 而我连题都做不出来呢😭 </p><p>这题的回溯 不需要循环 直接把我整懵逼了 <a href="https://leetcode.cn/problems/generate-parentheses/solutions/192912/gua-hao-sheng-cheng-by-leetcode-solution">题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        backtrack(ans, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(), <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;String&gt; ans, StringBuilder cur, <span class="type">int</span> open, <span class="type">int</span> close, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.length() == max * <span class="number">2</span>) &#123;</span><br><span class="line">            ans.add(cur.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (open &lt; max) &#123;</span><br><span class="line">            cur.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            backtrack(ans, cur, open + <span class="number">1</span>, close, max);</span><br><span class="line">            cur.deleteCharAt(cur.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (close &lt; open) &#123;</span><br><span class="line">            cur.append(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            backtrack(ans, cur, open, close + <span class="number">1</span>, max);</span><br><span class="line">            cur.deleteCharAt(cur.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-11"><a href="#7-11" class="headerlink" title="7.11"></a>7.11</h2><h3 id="79-单词搜索-力扣（LeetCode）"><a href="#79-单词搜索-力扣（LeetCode）" class="headerlink" title="79. 单词搜索 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/word-search/description/?envType=study-plan-v2&envId=top-interview-150">79. 单词搜索 - 力扣（LeetCode）</a></h3><p>经典用set记录通过用例然后消耗时间惨不忍睹 两千多毫秒也算打破记录了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> [][]direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> limitR,limitC;</span><br><span class="line">    String target;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        limitR = board.length;limitC = board[<span class="number">0</span>].length;target=word;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;board[<span class="number">0</span>].length;k++)</span><br><span class="line">                <span class="keyword">if</span>(board[i][k]==word.charAt(<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span>(find(i,k,<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(),word.length(),board,set))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,StringBuilder str,<span class="type">int</span> len,<span class="type">char</span>[][] board,Set&lt;Integer&gt; set)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> str.toString().equals(target);</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashcode</span> <span class="operator">=</span> row*<span class="number">10</span>+col;</span><br><span class="line">        <span class="keyword">if</span>(row&lt;limitR&amp;&amp;row&gt;=<span class="number">0</span>&amp;&amp;col&lt;limitC&amp;&amp;col&gt;=<span class="number">0</span>&amp;&amp;!set.contains(hashcode))&#123;</span><br><span class="line">            str.append(board[row][col]);set.add(hashcode);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> []dir:direction)&#123;</span><br><span class="line">                <span class="keyword">if</span>(find(row+dir[<span class="number">0</span>],col+dir[<span class="number">1</span>],str,len-<span class="number">1</span>,board,set)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str.deleteCharAt(str.length()-<span class="number">1</span>);set.remove(hashcode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改用Boolean二维数组记录之后还是要一秒多 看来问题出在算法上 需要剪枝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> [][]direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> limitR,limitC;</span><br><span class="line">    String target;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        limitR = board.length;limitC = board[<span class="number">0</span>].length;target=word;</span><br><span class="line">        <span class="type">boolean</span>[][] set = <span class="keyword">new</span> <span class="title class_">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;board[<span class="number">0</span>].length;k++)</span><br><span class="line">                <span class="keyword">if</span>(board[i][k]==word.charAt(<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span>(find(i,k,<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(),word.length(),board,set))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,StringBuilder str,<span class="type">int</span> len,<span class="type">char</span>[][] board,<span class="type">boolean</span>[][] set)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> str.toString().equals(target);</span><br><span class="line">        <span class="keyword">if</span>(row&lt;limitR&amp;&amp;row&gt;=<span class="number">0</span>&amp;&amp;col&lt;limitC&amp;&amp;col&gt;=<span class="number">0</span>&amp;&amp;!set[row][col])&#123;</span><br><span class="line">            str.append(board[row][col]);set[row][col]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> []dir:direction)&#123;</span><br><span class="line">                <span class="keyword">if</span>(find(row+dir[<span class="number">0</span>],col+dir[<span class="number">1</span>],str,len-<span class="number">1</span>,board,set)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str.deleteCharAt(str.length()-<span class="number">1</span>);set[row][col]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过传参希望的char剪枝将消耗时间减少到了三百多毫秒 跟前排还差两百毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> [][]direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> limitR,limitC;</span><br><span class="line">    String target;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        limitR = board.length;limitC = board[<span class="number">0</span>].length;target=word;</span><br><span class="line">        <span class="type">boolean</span>[][] set = <span class="keyword">new</span> <span class="title class_">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;board[<span class="number">0</span>].length;k++)</span><br><span class="line">                <span class="keyword">if</span>(board[i][k]==word.charAt(<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span>(find(i,k,<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(),<span class="number">0</span>,board,set,word.charAt(<span class="number">0</span>)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,StringBuilder str,<span class="type">int</span> len,<span class="type">char</span>[][] board,<span class="type">boolean</span>[][] set,<span class="type">char</span> need)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len==target.length()) <span class="keyword">return</span> str.toString().equals(target);</span><br><span class="line">        <span class="keyword">if</span>(row&lt;limitR&amp;&amp;row&gt;=<span class="number">0</span>&amp;&amp;col&lt;limitC&amp;&amp;col&gt;=<span class="number">0</span>&amp;&amp;!set[row][col])&#123;</span><br><span class="line">            <span class="keyword">if</span>(need!=board[row][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            str.append(board[row][col]);set[row][col]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> []dir:direction)&#123;</span><br><span class="line">                <span class="keyword">if</span>(find(row+dir[<span class="number">0</span>],col+dir[<span class="number">1</span>],str,len+<span class="number">1</span>,board,set,len+<span class="number">1</span>==target.length()?need:target.charAt(len+<span class="number">1</span>))) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str.deleteCharAt(str.length()-<span class="number">1</span>);set[row][col]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看了题解知道了 原来根本不需要StringBuilder和下一个char 去掉之后时间是190ms 跟上大部队了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> [][]direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> limitR,limitC;</span><br><span class="line">    String target;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        limitR = board.length;limitC = board[<span class="number">0</span>].length;target=word;</span><br><span class="line">        <span class="type">boolean</span>[][] set = <span class="keyword">new</span> <span class="title class_">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;board[<span class="number">0</span>].length;k++)</span><br><span class="line">                <span class="keyword">if</span>(board[i][k]==word.charAt(<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span>(find(i,k,<span class="number">0</span>,board,set))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,<span class="type">int</span> len,<span class="type">char</span>[][] board,<span class="type">boolean</span>[][] set)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row&lt;limitR&amp;&amp;row&gt;=<span class="number">0</span>&amp;&amp;col&lt;limitC&amp;&amp;col&gt;=<span class="number">0</span>&amp;&amp;!set[row][col])&#123;</span><br><span class="line">            <span class="keyword">if</span>(len==target.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[row][col]==target.charAt(len))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target.charAt(len)!=board[row][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            set[row][col]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> []dir:direction)&#123;</span><br><span class="line">                <span class="keyword">if</span>(find(row+dir[<span class="number">0</span>],col+dir[<span class="number">1</span>],len+<span class="number">1</span>,board,set)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set[row][col]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再优化没用的参数和臃肿的循环 缩短到161ms了 到这地步算法都大差不差了 剩下的就是细节优化了 不写了(更快的写法是不新建数组记录用过的字符 而是直接用原二维数组记录 这样写不太好理解而且没那个必要了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] set = <span class="keyword">new</span> <span class="title class_">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;board[<span class="number">0</span>].length;k++)</span><br><span class="line">                <span class="keyword">if</span>(board[i][k]==word.charAt(<span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span>(find(i,k,<span class="number">0</span>,board,set,word))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,<span class="type">int</span> len,<span class="type">char</span>[][] board,<span class="type">boolean</span>[][] set,String word)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(row&lt;board.length&amp;&amp;row&gt;=<span class="number">0</span>&amp;&amp;col&lt;board[<span class="number">0</span>].length&amp;&amp;col&gt;=<span class="number">0</span>&amp;&amp;!set[row][col])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(len==word.length()-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> board[row][col] == word.charAt(len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(word.charAt(len)!=board[row][col]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        set[row][col]=<span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> find(row+<span class="number">1</span>,col,len+<span class="number">1</span>,board,set,word) ||find(row-<span class="number">1</span>,col,len+<span class="number">1</span>,board,set,word)</span><br><span class="line">                || find(row,col+<span class="number">1</span>,len+<span class="number">1</span>,board,set,word) ||find(row,col-<span class="number">1</span>,len+<span class="number">1</span>,board,set,word);</span><br><span class="line">        set[row][col]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="148-排序链表-力扣（LeetCode）"><a href="#148-排序链表-力扣（LeetCode）" class="headerlink" title="148. 排序链表 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/sort-list/description/?envType=study-plan-v2&envId=top-interview-150">148. 排序链表 - 力扣（LeetCode）</a></h3><p>题目有分治的标签 但我只是重写了ListNode的比较函数后用快排排序了…(完美符合时间复杂度O(nlogn)有没有)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(head);</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        list.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;ListNode&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(ListNode o1, ListNode o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.val-o2.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);head=ans;</span><br><span class="line">        <span class="keyword">for</span>(ListNode node:list) &#123;</span><br><span class="line">            head.next=node;head=node;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> ans.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然不能偷懒啦…所以还是学了分治的方法😔</p><p>之前我纠结的是分治之后的两个链表要怎么合并 结果题解说参考<a href="https://leetcode.cn/problems/merge-two-sorted-lists/">. - 力扣（LeetCode）</a> 不是直接合并而是遍历合并啊… 还有快慢指针划分链表也是个新思路 最后合并链表的处理也挺巧妙的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode fast=head,slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="literal">null</span>&amp;&amp;fast.next.next!=<span class="literal">null</span>) &#123;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast=slow.next;slow.next=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">list1</span> <span class="operator">=</span> sortList(fast),list2 = sortList(head),ans = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>),p=ans;</span><br><span class="line">        <span class="keyword">while</span>(list1!=<span class="literal">null</span>&amp;&amp;list2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list1.val&lt;list2.val)&#123;</span><br><span class="line">                p.next = list1;list1=list1.next;p=p.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p.next = list2;list2=list2.next;p=p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1!=<span class="literal">null</span>) p.next=list1;</span><br><span class="line">        <span class="keyword">if</span>(list2!=<span class="literal">null</span>) p.next=list2;</span><br><span class="line">        <span class="keyword">return</span> ans.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="427-建立四叉树-力扣（LeetCode）"><a href="#427-建立四叉树-力扣（LeetCode）" class="headerlink" title="427. 建立四叉树 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/construct-quad-tree/description/?envType=study-plan-v2&envId=top-interview-150">427. 建立四叉树 - 力扣（LeetCode）</a></h3><p>写得有点慢了 还调试了半天 一个原因是题目描述的输出不够清楚 如果是叶子节点就不能连接四个子网格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">construct</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">ans</span> <span class="operator">=</span> fun(grid,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;grid.length-<span class="number">1</span>, grid[<span class="number">0</span>].length-<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">fun</span><span class="params">(<span class="type">int</span>[][] grid,<span class="type">int</span> []topLeftIndex,<span class="type">int</span> []bottomRightIndex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bottomRightIndex[<span class="number">0</span>]==topLeftIndex[<span class="number">0</span>]) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(grid[topLeftIndex[<span class="number">0</span>]][topLeftIndex[<span class="number">1</span>]]==<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> []half=&#123;(bottomRightIndex[<span class="number">0</span>]-topLeftIndex[<span class="number">0</span>]+<span class="number">1</span>)/<span class="number">2</span>-<span class="number">1</span>+topLeftIndex[<span class="number">0</span>],(bottomRightIndex[<span class="number">1</span>]-topLeftIndex[<span class="number">1</span>]+<span class="number">1</span>)/<span class="number">2</span>-<span class="number">1</span>+topLeftIndex[<span class="number">1</span>]&#125;;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">topLeft</span> <span class="operator">=</span> fun(grid,topLeftIndex,half);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">topRight</span> <span class="operator">=</span> fun(grid,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;topLeftIndex[<span class="number">0</span>],half[<span class="number">1</span>]+<span class="number">1</span>&#125;,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;half[<span class="number">0</span>],bottomRightIndex[<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">bottomLeft</span> <span class="operator">=</span> fun(grid,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;half[<span class="number">0</span>]+<span class="number">1</span>,topLeftIndex[<span class="number">1</span>]&#125;,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;bottomRightIndex[<span class="number">0</span>],half[<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">bottomRight</span> <span class="operator">=</span> fun(grid,<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;half[<span class="number">0</span>]+<span class="number">1</span>,half[<span class="number">1</span>]+<span class="number">1</span>&#125;,bottomRightIndex);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLeaf</span> <span class="operator">=</span> topLeft.isLeaf&amp;&amp; topRight.isLeaf&amp;&amp; bottomLeft.isLeaf&amp;&amp; bottomRight.isLeaf&amp;&amp;(topLeft.val==topRight.val&amp;&amp;topLeft.val==bottomLeft.val&amp;&amp;topLeft.val==bottomRight.val);</span><br><span class="line">        <span class="keyword">if</span>(isLeaf) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(grid[topLeftIndex[<span class="number">0</span>]][topLeftIndex[<span class="number">1</span>]]==<span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(grid[topLeftIndex[<span class="number">0</span>]][topLeftIndex[<span class="number">1</span>]]==<span class="number">1</span>,isLeaf,topLeft,topRight,bottomLeft,bottomRight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="208-实现-Trie-前缀树-力扣（LeetCode）"><a href="#208-实现-Trie-前缀树-力扣（LeetCode）" class="headerlink" title="208. 实现 Trie (前缀树) - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/description/?envType=study-plan-v2&envId=top-interview-150">208. 实现 Trie (前缀树) - 力扣（LeetCode）</a></h3><p>倒是自己实现了 不过执行时间不太好 用的是map记录的树形结构 用数组会不会好点?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">char</span> val;</span><br><span class="line">        Map&lt;Character,Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Node(<span class="type">char</span> val)&#123;<span class="built_in">this</span>.val = val;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root  = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p.map.containsKey(ch))&#123;</span><br><span class="line">                p.map.put(ch,<span class="keyword">new</span> <span class="title class_">Node</span>(ch));</span><br><span class="line">                p=p.map.get(ch);</span><br><span class="line">            &#125;<span class="keyword">else</span> p=p.map.get(ch);</span><br><span class="line">        &#125;p.map.put(<span class="string">&#x27;_&#x27;</span>,<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;_&#x27;</span>));<span class="comment">//终止符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p.map.containsKey(ch))&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            p=p.map.get(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p.map.containsKey(<span class="string">&#x27;_&#x27;</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = prefix.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!p.map.containsKey(ch))&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            p=p.map.get(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把map换成数组 超过72%了 还行 而且我发现这玩意不能认真 执行用时和消耗内存随机波动太大了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">char</span> val;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> end;</span><br><span class="line">        Node [] map = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">        Node(<span class="type">char</span> val)&#123;<span class="built_in">this</span>.val = val;end = <span class="literal">false</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root  = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                p.map[ch-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Node</span>(ch);</span><br><span class="line">                p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span> p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;p.end=<span class="literal">true</span>;<span class="comment">//终止符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = prefix.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多跑了几遍 现在已经超过98.92%了 有点搞笑</p><h3 id="211-添加与搜索单词-数据结构设计-力扣（LeetCode）"><a href="#211-添加与搜索单词-数据结构设计-力扣（LeetCode）" class="headerlink" title="211. 添加与搜索单词 - 数据结构设计 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/description/?envType=study-plan-v2&envId=top-interview-150">211. 添加与搜索单词 - 数据结构设计 - 力扣（LeetCode）</a></h3><p>调了半天改来改去结果最后还是惨不忍睹的用时 (610ms)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">char</span> val;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> end;</span><br><span class="line">        Node[] map = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">        Node(<span class="type">char</span> val)&#123;<span class="built_in">this</span>.val = val;end = <span class="literal">false</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordDictionary</span><span class="params">()</span> &#123;</span><br><span class="line">        root  = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWord</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(ch);</span><br><span class="line">                p.map[ch-<span class="string">&#x27;a&#x27;</span>] = node;</span><br><span class="line">            &#125;p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;p.end=<span class="literal">true</span>;<span class="comment">//终止符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchPoint(word,root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchPoint</span><span class="params">(String word,Node node)</span>&#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=node;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i]!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p.map[chars[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">                p=p.map[chars[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(word);</span><br><span class="line">                <span class="keyword">while</span>(str.charAt(<span class="number">0</span>)!=<span class="string">&#x27;.&#x27;</span>) str.delete(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                str.delete(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(String.valueOf((<span class="type">char</span>) (k + <span class="string">&#x27;a&#x27;</span>)) + str);</span><br><span class="line">                    <span class="keyword">if</span>(searchPoint(newStr.toString(),p)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个小小的剪枝就能快1.5倍 (398ms)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">char</span> val;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> end;</span><br><span class="line">        Node[] map = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">        Node(<span class="type">char</span> val)&#123;<span class="built_in">this</span>.val = val;end = <span class="literal">false</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordDictionary</span><span class="params">()</span> &#123;</span><br><span class="line">        root  = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWord</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(ch);</span><br><span class="line">                p.map[ch-<span class="string">&#x27;a&#x27;</span>] = node;</span><br><span class="line">            &#125;p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;p.end=<span class="literal">true</span>;<span class="comment">//终止符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchPoint(word,root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchPoint</span><span class="params">(String word,Node node)</span>&#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=node;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i]!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p.map[chars[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">                p=p.map[chars[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(word);</span><br><span class="line">                <span class="keyword">while</span>(str.charAt(<span class="number">0</span>)!=<span class="string">&#x27;.&#x27;</span>) str.delete(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                str.delete(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p.map[k]!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="type">StringBuilder</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(String.valueOf((<span class="type">char</span>) (k + <span class="string">&#x27;a&#x27;</span>)) + str);</span><br><span class="line">                        <span class="keyword">if</span>(searchPoint(newStr.toString(),p)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想不到怎么改了 看看164ms的代码 : 用了传参来记录目前遍历的字符串长度 我是铸币吗 为什么要执着于用字符串传这个信息???</p><p>改完了 183ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">char</span> val;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> end;</span><br><span class="line">        Node[] map = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">        Node(<span class="type">char</span> val)&#123;<span class="built_in">this</span>.val = val;end = <span class="literal">false</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordDictionary</span><span class="params">()</span> &#123;</span><br><span class="line">        root  = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWord</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span> [] chars = word.toCharArray();</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(ch);</span><br><span class="line">                p.map[ch-<span class="string">&#x27;a&#x27;</span>] = node;</span><br><span class="line">            &#125;p=p.map[ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;p.end=<span class="literal">true</span>;<span class="comment">//终止符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchPoint(word,root,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchPoint</span><span class="params">(String word,Node node,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len==word.length()) <span class="keyword">return</span> node.end;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(len);</span><br><span class="line">        <span class="keyword">if</span>(ch!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.map[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">            <span class="keyword">return</span> searchPoint(word,node.map[ch-<span class="string">&#x27;a&#x27;</span>],len+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.map[k]!=<span class="literal">null</span>&amp;&amp;searchPoint(word,node.map[k],len+<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-12"><a href="#7-12" class="headerlink" title="7.12"></a>7.12</h2><h3 id="120-三角形最小路径和-力扣（LeetCode）"><a href="#120-三角形最小路径和-力扣（LeetCode）" class="headerlink" title="120. 三角形最小路径和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/triangle/description/?envType=study-plan-v2&envId=top-interview-150">120. 三角形最小路径和 - 力扣（LeetCode）</a></h3><p>dp记录走过的路径 第一次用了二维list记录dp 17ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(triangle.size()==<span class="number">1</span>)<span class="keyword">return</span> triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; dp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dp.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());dp.get(<span class="number">0</span>).add(<span class="number">0</span>,triangle.get(<span class="number">0</span>).get(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;triangle.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            dp.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;triangle.get(i).size();k++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k1</span> <span class="operator">=</span> triangle.get(i+<span class="number">1</span>).get(k)+dp.get(i).get(k),k2=triangle.get(i+<span class="number">1</span>).get(k+<span class="number">1</span>)+dp.get(i).get(k);</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp.get(i+<span class="number">1</span>).add(k1);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp.get(i+<span class="number">1</span>).set(k,Math.min(k1,dp.get(i+<span class="number">1</span>).get(k)));</span><br><span class="line">                &#125;</span><br><span class="line">                dp.get(i+<span class="number">1</span>).add(k2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=dp.get(dp.size()-<span class="number">1</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:dp.get(dp.size()-<span class="number">1</span>)) ans = Math.min(ans,i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次 用二维数组记录dp 8ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(triangle.size()==<span class="number">1</span>)<span class="keyword">return</span> triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;triangle.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">0</span>] = triangle.get(i+<span class="number">1</span>).get(<span class="number">0</span>)+dp[i][<span class="number">0</span>];</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>]=triangle.get(i+<span class="number">1</span>).get(<span class="number">1</span>)+dp[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;k&lt;triangle.get(i).size();k++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k1</span> <span class="operator">=</span> triangle.get(i+<span class="number">1</span>).get(k)+dp[i][k],k2=triangle.get(i+<span class="number">1</span>).get(k+<span class="number">1</span>)+dp[i][k];</span><br><span class="line">                dp[i+<span class="number">1</span>][k] = Math.min(k1,dp[i+<span class="number">1</span>][k]);</span><br><span class="line">                dp[i+<span class="number">1</span>][k+<span class="number">1</span>]=k2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=dp[triangle.size()-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;triangle.size();i++) ans = Math.min(ans,dp[triangle.size()-<span class="number">1</span>][i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三次 可以只用两个n长度的数组记录dp 5ms 内存消耗很大减少 (写完了才发现题目原来有提示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(triangle.size()==<span class="number">1</span>)<span class="keyword">return</span> triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[triangle.size()];</span><br><span class="line">        <span class="type">int</span> [] dpLast = <span class="keyword">new</span> <span class="title class_">int</span>[triangle.size()];</span><br><span class="line">        dp[<span class="number">0</span>]=triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);dpLast[<span class="number">0</span>] = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;triangle.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;=i;k++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k1</span> <span class="operator">=</span> triangle.get(i+<span class="number">1</span>).get(k)+dpLast[k],k2=triangle.get(i+<span class="number">1</span>).get(k+<span class="number">1</span>)+dpLast[k];</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">0</span>) dp[<span class="number">0</span>] = triangle.get(i+<span class="number">1</span>).get(<span class="number">0</span>)+dpLast[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">else</span> dp[k] = Math.min(k1,dp[k]);</span><br><span class="line">                dp[k+<span class="number">1</span>]=k2;</span><br><span class="line">                dpLast[k]=dp[k];</span><br><span class="line">            &#125;dpLast[triangle.get(i).size()]=dp[triangle.get(i).size()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;triangle.size();i++) ans = Math.min(ans,dp[i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没忍住看了别人的代码 太天才了 倒着遍历三角形 每次循环操作大大减少而且只要一个n长度数组 2ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> triangle.size();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[size + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line"></span><br><span class="line">                dp[j] = triangle.get(i).get(j) + Math.min(dp[j], dp[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="64-最小路径和-力扣（LeetCode）"><a href="#64-最小路径和-力扣（LeetCode）" class="headerlink" title="64. 最小路径和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&envId=top-interview-150">64. 最小路径和 - 力扣（LeetCode）</a></h3><p>用原数组记录路径 dp 先计算顶部和左侧的dp防止越界问题 沿最小边的对角线遍历每行每列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=grid.length,n=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            grid[<span class="number">0</span>][k] += grid[<span class="number">0</span>][k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            grid[k][<span class="number">0</span>] += grid[k-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;Math.max(m,n);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;Math.min(m,n))</span><br><span class="line">                grid[i][i] += Math.min(grid[i-<span class="number">1</span>][i],grid[i][i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span>i+<span class="number">1</span> ;k&lt;n&amp;&amp;i&lt;m;k++)&#123;</span><br><span class="line">                grid[i][k] += Math.min(grid[i][k-<span class="number">1</span>],grid[i-<span class="number">1</span>][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;m&amp;&amp;i&lt;n;k++)&#123;</span><br><span class="line">                grid[k][i] += Math.min(grid[k][i-<span class="number">1</span>],grid[k-<span class="number">1</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.13更新: 写完某题后蓦然回首发现我是傻逼 直接按行遍历就完了干嘛要行列遍历折磨自己</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=grid.length,n=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            grid[<span class="number">0</span>][k] += grid[<span class="number">0</span>][k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            grid[k][<span class="number">0</span>] += grid[k-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">                grid[i][k] += Math.min(grid[i][k-<span class="number">1</span>],grid[i-<span class="number">1</span>][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="63-不同路径-II-力扣（LeetCode）"><a href="#63-不同路径-II-力扣（LeetCode）" class="headerlink" title="63. 不同路径 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/unique-paths-ii/description/?envType=study-plan-v2&envId=top-interview-150">63. 不同路径 II - 力扣（LeetCode）</a></h3><p>改了一下上面那道题的代码 击败100% 也是用原数组记录dp 灵光一现把1换成0 然后记录能走的路有多少种路径能到达(用负数记录的原因是一开始想的时候觉得可能变1被判断成石头 后来把1都换成0了就没这个问题了 用正负数都行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=obstacleGrid.length,n=obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>||obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>]==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][k]==<span class="number">1</span>)&#123;obstacleGrid[<span class="number">0</span>][k]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            obstacleGrid[<span class="number">0</span>][k] += obstacleGrid[<span class="number">0</span>][k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obstacleGrid[k][<span class="number">0</span>]==<span class="number">1</span>)&#123;obstacleGrid[k][<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            obstacleGrid[k][<span class="number">0</span>] += obstacleGrid[k-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;Math.max(m,n);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;Math.min(m,n))</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][i]==<span class="number">1</span>)&#123;obstacleGrid[i][i]=<span class="number">0</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> obstacleGrid[i][i] =obstacleGrid[i-<span class="number">1</span>][i]+obstacleGrid[i][i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span>i+<span class="number">1</span> ;k&lt;n&amp;&amp;i&lt;m;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][k]==<span class="number">1</span>)&#123;obstacleGrid[i][k]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                obstacleGrid[i][k] = obstacleGrid[i][k-<span class="number">1</span>]+obstacleGrid[i-<span class="number">1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;m&amp;&amp;i&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[k][i]==<span class="number">1</span>)&#123;obstacleGrid[k][i]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                obstacleGrid[k][i] = obstacleGrid[k][i-<span class="number">1</span>]+obstacleGrid[k-<span class="number">1</span>][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.13 : 同上题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=obstacleGrid.length,n=obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>||obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>]==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][k]==<span class="number">1</span>)&#123;obstacleGrid[<span class="number">0</span>][k]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            obstacleGrid[<span class="number">0</span>][k] += obstacleGrid[<span class="number">0</span>][k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obstacleGrid[k][<span class="number">0</span>]==<span class="number">1</span>)&#123;obstacleGrid[k][<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            obstacleGrid[k][<span class="number">0</span>] += obstacleGrid[k-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][k]==<span class="number">1</span>)&#123;obstacleGrid[i][k]=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                obstacleGrid[i][k] = obstacleGrid[i][k-<span class="number">1</span>]+obstacleGrid[i-<span class="number">1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="221-最大正方形-力扣（LeetCode）"><a href="#221-最大正方形-力扣（LeetCode）" class="headerlink" title="221. 最大正方形 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/maximal-square/description/?envType=study-plan-v2&envId=top-interview-150">221. 最大正方形 - 力扣（LeetCode）</a></h3><p>依旧是上面的思路 7ms 不过这次时间只超过31%了 待我看看怎么优化一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=matrix.length,n=matrix[<span class="number">0</span>].length,ans=Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> [][]dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=matrix[<span class="number">0</span>][<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;ans = dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][k] = matrix[<span class="number">0</span>][k]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            ans = Math.max(ans,dp[<span class="number">0</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            dp[k][<span class="number">0</span>] = matrix[k][<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            ans = Math.max(ans,dp[k][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;Math.max(m,n);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;Math.min(m,n)&amp;&amp;matrix[i][i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                dp[i][i] = Math.min(dp[i-<span class="number">1</span>][i],Math.min(dp[i][i-<span class="number">1</span>],dp[i-<span class="number">1</span>][i-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                ans = Math.max(ans,dp[i][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span>i+<span class="number">1</span> ;k&lt;n&amp;&amp;i&lt;m;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][k]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                    dp[i][k] = Math.min(dp[i][k-<span class="number">1</span>],Math.min(dp[i-<span class="number">1</span>][k],dp[i-<span class="number">1</span>][k-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                ans = Math.max(ans,dp[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;m&amp;&amp;i&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[k][i]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                    dp[k][i] = Math.min(dp[k][i-<span class="number">1</span>],Math.min(dp[k-<span class="number">1</span>][i],dp[k-<span class="number">1</span>][i-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                ans = Math.max(ans,dp[k][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans*ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化了一下ans的赋值判断逻辑 结果发现只是随机波动太大了 7ms是31% 6ms是90% 无语</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=matrix.length,n=matrix[<span class="number">0</span>].length,ans=Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> [][]dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=matrix[<span class="number">0</span>][<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;ans = dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][k] = matrix[<span class="number">0</span>][k]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans!=<span class="number">1</span>&amp;&amp;dp[<span class="number">0</span>][k]==<span class="number">1</span>) ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            dp[k][<span class="number">0</span>] = matrix[k][<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans!=<span class="number">1</span>&amp;&amp;dp[k][<span class="number">0</span>]==<span class="number">1</span>) ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;Math.max(m,n);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;Math.min(m,n)&amp;&amp;matrix[i][i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                dp[i][i] = Math.min(dp[i-<span class="number">1</span>][i],Math.min(dp[i][i-<span class="number">1</span>],dp[i-<span class="number">1</span>][i-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                ans = Math.max(ans,dp[i][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span>i+<span class="number">1</span> ;k&lt;n&amp;&amp;i&lt;m;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][k]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][k] = Math.min(dp[i][k-<span class="number">1</span>],Math.min(dp[i-<span class="number">1</span>][k],dp[i-<span class="number">1</span>][k-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                    ans = Math.max(ans,dp[i][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i+<span class="number">1</span>;k&lt;m&amp;&amp;i&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[k][i]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    dp[k][i] = Math.min(dp[k][i-<span class="number">1</span>],Math.min(dp[k-<span class="number">1</span>][i],dp[k-<span class="number">1</span>][i-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                    ans = Math.max(ans,dp[k][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans*ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又跑了几遍 优化还是有用的 第一次的代码多跑几次也没跑到6ms</p><p>7.13 : - _ -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=matrix.length,n=matrix[<span class="number">0</span>].length,ans=Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> [][]dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=matrix[<span class="number">0</span>][<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;ans = dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][k] = matrix[<span class="number">0</span>][k]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans!=<span class="number">1</span>&amp;&amp;dp[<span class="number">0</span>][k]==<span class="number">1</span>) ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;m;k++)&#123;</span><br><span class="line">            dp[k][<span class="number">0</span>] = matrix[k][<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans!=<span class="number">1</span>&amp;&amp;dp[k][<span class="number">0</span>]==<span class="number">1</span>) ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][k]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][k] = Math.min(dp[i][k-<span class="number">1</span>],Math.min(dp[i-<span class="number">1</span>][k],dp[i-<span class="number">1</span>][k-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                    ans = Math.max(ans,dp[i][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans*ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="97-交错字符串-力扣（LeetCode）"><a href="#97-交错字符串-力扣（LeetCode）" class="headerlink" title="97. 交错字符串 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/interleaving-string/description/?envType=study-plan-v2&envId=top-interview-150">97. 交错字符串 - 力扣（LeetCode）</a></h3><p>想了半天想不到状态转移方程 搞不懂怎么用dp记录 看了某大佬的题解豁然开朗醍醐灌顶 只看一眼下面的图便解开所有疑惑:</p><p><img src="https://pic.joking7.com/202407130135932.png" alt="image-20240713013501292"></p><p>一图胜千言啊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s1.length(), n = s2.length();</span><br><span class="line">        <span class="keyword">if</span> (s3.length() != m + n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 动态规划，dp[i,j]表示s1前i字符能与s2前j字符组成s3前i+j个字符；</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m &amp;&amp; s1.charAt(i-<span class="number">1</span>) == s3.charAt(i-<span class="number">1</span>); i++) dp[i][<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 不相符直接终止</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n &amp;&amp; s2.charAt(j-<span class="number">1</span>) == s3.charAt(j-<span class="number">1</span>); j++) dp[<span class="number">0</span>][j] = <span class="literal">true</span>; <span class="comment">// 不相符直接终止</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dp[i][j] = (dp[i - <span class="number">1</span>][j] &amp;&amp; s3.charAt(i + j - <span class="number">1</span>) == s1.charAt(i - <span class="number">1</span>))</span><br><span class="line">                        || (dp[i][j - <span class="number">1</span>] &amp;&amp; s3.charAt(i + j - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-13"><a href="#7-13" class="headerlink" title="7.13"></a>7.13</h2><h3 id="72-编辑距离-力扣（LeetCode）"><a href="#72-编辑距离-力扣（LeetCode）" class="headerlink" title="72. 编辑距离 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/edit-distance/description/?envType=study-plan-v2&envId=top-interview-150">72. 编辑距离 - 力扣（LeetCode）</a></h3><p>这真的是中等题吗? 看题解都看了一会才理解 <a href="https://leetcode.cn/problems/edit-distance/solutions/189676/edit-distance-by-ikaruga">题解</a></p><p>做完发现我之前做多维dp的时候直接一行行遍历就行了呀 一行一列地遍历又麻烦又容易错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [][]dp=<span class="keyword">new</span> <span class="title class_">int</span>[word1.length()+<span class="number">1</span>][word2.length()+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> len1=word1.length(),len2 = word2.length();</span><br><span class="line">        <span class="type">char</span> [] chars1 = word1.toCharArray(),chars2 = word2.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len1;i++) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len2;i++) dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len1;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=len2;k++)&#123;</span><br><span class="line">                dp[i][k] = Math.min(dp[i-<span class="number">1</span>][k-<span class="number">1</span>],Math.min(dp[i-<span class="number">1</span>][k],dp[i][k-<span class="number">1</span>]))+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(chars1[i-<span class="number">1</span>]==chars2[k-<span class="number">1</span>])</span><br><span class="line">                    dp[i][k] = Math.min(dp[i][k],dp[i-<span class="number">1</span>][k-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[word1.length()][word2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考代码里有用递归做的 比一般遍历快一倍(4ms-&gt;2ms) 贴一下代码吧 也是计算三种操作分别的最小步数 不过它没扩大dp半圈所以遍历数减少了n+m次 所以比一般dp快 不过递归的话内存占用会变多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    String word1;</span><br><span class="line">    String word2;</span><br><span class="line">    <span class="type">int</span>[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.word1 = word1;</span><br><span class="line">        <span class="built_in">this</span>.word2 = word2;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[word1.length()][word2.length()];</span><br><span class="line">        <span class="keyword">return</span> dp(word1.length() - <span class="number">1</span>, word2.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> index1, <span class="type">int</span> index2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index1 == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index2 == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index1 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[index1][index2] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[index1][index2];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (word1.charAt(index1) == word2.charAt(index2)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> dp(index1 - <span class="number">1</span>, index2 - <span class="number">1</span>);</span><br><span class="line">            dp[index1][index2] = num;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> dp(index1 - <span class="number">1</span>, index2) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> dp(index1, index2 - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">replace</span> <span class="operator">=</span> dp(index1 - <span class="number">1</span>, index2 - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(delete, Math.min(add, replace));</span><br><span class="line">        dp[index1][index2] = min;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> DP </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录 1</title>
      <link href="/2024/06/28/%E5%88%B7%E9%A2%981/"/>
      <url>/2024/06/28/%E5%88%B7%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h2 id="6-28"><a href="#6-28" class="headerlink" title="6.28"></a>6.28</h2><h3 id="199-二叉树的右视图-力扣（LeetCode）"><a href="#199-二叉树的右视图-力扣（LeetCode）" class="headerlink" title="199. 二叉树的右视图 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/?envType=study-plan-v2&envId=top-interview-150">199. 二叉树的右视图 - 力扣（LeetCode）</a></h3><p>层序遍历后每层取最右边的结点储存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.toArray().length;</span><br><span class="line">            <span class="keyword">while</span>((len--)!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) &#123;queue.add(treeNode.left);&#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) &#123;queue.add(treeNode.right);&#125;</span><br><span class="line">                <span class="keyword">if</span>(len==<span class="number">0</span>) ans.add(treeNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="637-二叉树的层平均值-力扣（LeetCode）"><a href="#637-二叉树的层平均值-力扣（LeetCode）" class="headerlink" title="637. 二叉树的层平均值 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/description/?envType=study-plan-v2&envId=top-interview-150">637. 二叉树的层平均值 - 力扣（LeetCode）</a></h3><p>层序遍历每层相加取平均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();queue.add(root);</span><br><span class="line">        List&lt;Double&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.toArray().length,length = len;</span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len--)!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) &#123;queue.add(treeNode.left);&#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) &#123;queue.add(treeNode.right);&#125;</span><br><span class="line">                sum+=treeNode.val;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(sum/length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="103-二叉树的锯齿形层序遍历-力扣（LeetCode）"><a href="#103-二叉树的锯齿形层序遍历-力扣（LeetCode）" class="headerlink" title="103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/?envType=study-plan-v2&envId=top-interview-150">103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode）</a></h3><p>设个flag,flag&#x3D;-1时从左往右,flag&#x3D;1时从右往左,每遍历一层flag&#x3D;-flag,用<strong>栈</strong>而不是队列存储每层节点就能解决节点顺序问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">zigzagLevelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Stack&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();queue.add(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.toArray().length;</span><br><span class="line">            Stack&lt;TreeNode&gt; queue1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">while</span>((len--)!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> queue.pop();</span><br><span class="line">                list.add(treeNode.val);</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>)&#123;queue1.push(treeNode.left);&#125;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>)&#123;queue1.push(treeNode.right);&#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>)&#123;queue1.push(treeNode.right);&#125;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>)&#123;queue1.push(treeNode.left);&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            queue = queue1;</span><br><span class="line">            Collections.reverse(list);</span><br><span class="line">            ans.add(list);</span><br><span class="line">            flag*=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="112-路径总和-力扣（LeetCode）"><a href="#112-路径总和-力扣（LeetCode）" class="headerlink" title="112. 路径总和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/path-sum/?envType=study-plan-v2&envId=top-interview-150">112. 路径总和 - 力扣（LeetCode）</a></h3><p>另写一函数遍历节点,参数传根节点到当前节点的sum,如果是叶子节点返回sum&#x3D;&#x3D;targetSum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">targetSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sumTree</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right==<span class="literal">null</span>) <span class="keyword">return</span> sum+root.val==targetSum;</span><br><span class="line">        sum+=root.val;</span><br><span class="line">        <span class="type">boolean</span> Fleft=<span class="literal">false</span>,Fright=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) Fleft = sumTree(root.left, sum);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) Fright = sumTree(root.right, sum);</span><br><span class="line">        <span class="keyword">return</span> Fleft||Fright;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.targetSum = targetSum;</span><br><span class="line">        <span class="keyword">return</span> sumTree(root,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="114-二叉树展开为链表-力扣（LeetCode）"><a href="#114-二叉树展开为链表-力扣（LeetCode）" class="headerlink" title="114. 二叉树展开为链表 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/?envType=study-plan-v2&envId=top-interview-150">114. 二叉树展开为链表 - 力扣（LeetCode）</a></h3><p>利用了前序遍历找到节点后左节点改变不影响后续遍历的特点,找完之后翻转一下整棵树的左右子树:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(-<span class="number">1</span>),p=head;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">fun</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        p.left = root;</span><br><span class="line">        p=p.left;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) fun(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) fun(root.right);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanNode</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cleanNode(root.left);</span><br><span class="line">            root.right=root.left;</span><br><span class="line">            root.left=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        fun(root);</span><br><span class="line">        cleanNode(head);</span><br><span class="line">        root=head.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种解法是将左右子树展开后拼接,讲道理拼接的算法要更好一点,可惜我没想到: <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/solutions/218689/114-er-cha-shu-zhan-kai-wei-lian-biao-by-ming-zhi-">114. 二叉树展开为链表</a></p><h2 id="6-30"><a href="#6-30" class="headerlink" title="6.30"></a>6.30</h2><h3 id="173-二叉搜索树迭代器-力扣（LeetCode）"><a href="#173-二叉搜索树迭代器-力扣（LeetCode）" class="headerlink" title="173. 二叉搜索树迭代器 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/binary-search-tree-iterator/description/?envType=study-plan-v2&envId=top-interview-150">173. 二叉搜索树迭代器 - 力扣（LeetCode）</a></h3><p>很容易想到的是先遍历得到中序遍历存储起来,然后一个个访问,不过空间复杂度是O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTIterator</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        InOrderTraverse(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InOrderTraverse</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        InOrderTraverse(root.left);</span><br><span class="line">        queue.add(root.val);</span><br><span class="line">        InOrderTraverse(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不容易想到的解法是维护一个栈使其存储根节点到当前节点的一条链,空间复杂度为O(H), H为树的高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();</span><br><span class="line">    TreeNode cur;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTIterator</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        cur = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=stack.pop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> cur.val;</span><br><span class="line">        cur=cur.right;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cur!=<span class="literal">null</span>||!stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="117-填充每个节点的下一个右侧节点指针-II-力扣（LeetCode）"><a href="#117-填充每个节点的下一个右侧节点指针-II-力扣（LeetCode）" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/?envType=study-plan-v2&envId=top-interview-150">117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）</a></h3><p>容易想到的是层次遍历挨个连接节点,空间复杂度O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;<span class="keyword">return</span> root;&#125;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentLevelSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= currentLevelSize; ++i) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;queue.offer(node.left);&#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;queue.offer(node.right);&#125;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">1</span>)&#123;</span><br><span class="line">                    last.next=node;</span><br><span class="line">                &#125;last=node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不容易想到的是利用每一层的头节点用next遍历每层,因为next实际上已经为我们将每层连接成链表了,所以不用额外空间,空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            Node nextHead=<span class="keyword">new</span> <span class="title class_">Node</span>(),temp=nextHead;</span><br><span class="line">            <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(head.left!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    temp.next = head.left;temp=temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(head.right!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    temp.next = head.right;temp=temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = nextHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="129-求根节点到叶节点数字之和-力扣（LeetCode）"><a href="#129-求根节点到叶节点数字之和-力扣（LeetCode）" class="headerlink" title="129. 求根节点到叶节点数字之和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/sum-root-to-leaf-numbers/description/?envType=study-plan-v2&envId=top-interview-150">129. 求根节点到叶节点数字之和 - 力扣（LeetCode）</a></h3><p>没啥好说的, 遍历然后按规则加, 唯一的难点可能在于想到另写一个参数不同的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sumLeaf</span><span class="params">(TreeNode root,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        sum=<span class="number">10</span>*sum+ root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right==<span class="literal">null</span>) &#123;</span><br><span class="line">            ans+=sum;<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sumLeaf(root.left,sum);</span><br><span class="line">        sumLeaf(root.right,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumNumbers</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        sumLeaf(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="236-二叉树的最近公共祖先-力扣（LeetCode）"><a href="#236-二叉树的最近公共祖先-力扣（LeetCode）" class="headerlink" title="236. 二叉树的最近公共祖先 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/?envType=study-plan-v2&envId=top-interview-150">236. 二叉树的最近公共祖先 - 力扣（LeetCode）</a></h3><p>重写了一个函数递归看左右子树和节点本身有没有符合的值,有一个就返回true,有两个就找到ans然后不用找了,因为题目保证节点值不同且一定存在答案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> p,q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfsFind</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> left=dfsFind(root.left),right = dfsFind(root.right);</span><br><span class="line">        <span class="keyword">if</span>(((root.val==q||root.val==p)&amp;&amp;(left||right))||(left&amp;&amp;right))&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="literal">null</span>) ans = root;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.val == q || root.val == p || left || right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.q=q.val;<span class="built_in">this</span>.p=p.val;</span><br><span class="line">        dfsFind(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个写得实在不够优雅,看题解找到一个相同思路且代码简洁优雅的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="literal">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="222-完全二叉树的节点个数-力扣（LeetCode）"><a href="#222-完全二叉树的节点个数-力扣（LeetCode）" class="headerlink" title="222. 完全二叉树的节点个数 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/?envType=study-plan-v2&envId=top-interview-150">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></h3><p>简单写法就直接遍历得到节点个数,这样时间复杂度是O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进阶我想到检查到空缺的叶子节点后剩下的就不用遍历了,这样时间复杂度最好情况是O(H),最坏是O(N); 二分法查找加位运算平均是O(logN*logN), 不过写起来真的很麻烦,我没想到 懒得写了,搬一下题解吧:<a href="https://leetcode.cn/problems/count-complete-tree-nodes/solutions/1/chang-gui-jie-fa-he-ji-bai-100de-javajie-fa-by-xia/?envType=study-plan-v2&envId=top-interview-150">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></p><h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><h3 id="530-二叉搜索树的最小绝对差-力扣（LeetCode）"><a href="#530-二叉搜索树的最小绝对差-力扣（LeetCode）" class="headerlink" title="530. 二叉搜索树的最小绝对差 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/?envType=study-plan-v2&envId=top-interview-150">530. 二叉搜索树的最小绝对差 - 力扣（LeetCode）</a></h3><p>二叉搜索树中序遍历就是从小到大排序的节点值,中序遍历后遍历排序数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        nums.add(root.val);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        inorder(root);</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">100002</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            ans = Math.min(Math.abs(nums.get(i)-nums.get(i+<span class="number">1</span>)),ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是其实中序遍历的时候就能进行对比了,时间减少一半:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">100002</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        <span class="keyword">if</span>(pre!=-<span class="number">1</span>) ans = Math.min(ans, root.val - pre);</span><br><span class="line">        pre = root.val;</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        inorder(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="230-二叉搜索树中第K小的元素-力扣（LeetCode）"><a href="#230-二叉搜索树中第K小的元素-力扣（LeetCode）" class="headerlink" title="230. 二叉搜索树中第K小的元素 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/?envType=study-plan-v2&envId=top-interview-150">230. 二叉搜索树中第K小的元素 - 力扣（LeetCode）</a></h3><p>简单中序遍历,计数遍历到第几个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==k||root==<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        <span class="keyword">if</span>(index==k) <span class="keyword">return</span> ans;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index==k) &#123;</span><br><span class="line">            ans = root.val;<span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.right);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k=k;</span><br><span class="line">        <span class="keyword">return</span> inorder(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="98-验证二叉搜索树-力扣（LeetCode）"><a href="#98-验证二叉搜索树-力扣（LeetCode）" class="headerlink" title="98. 验证二叉搜索树 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/validate-binary-search-tree/?envType=study-plan-v2&envId=top-interview-150">98. 验证二叉搜索树 - 力扣（LeetCode）</a></h3><p>二叉搜索树中序遍历从小到大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> pre;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!ans ||root==<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            pre = root.val;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val&lt;=pre)&#123;</span><br><span class="line">                ans = <span class="literal">false</span>;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre = root.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.right);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inorder(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="190-颠倒二进制位-力扣（LeetCode）"><a href="#190-颠倒二进制位-力扣（LeetCode）" class="headerlink" title="190. 颠倒二进制位 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/reverse-bits/?envType=study-plan-v2&envId=top-interview-150">190. 颠倒二进制位 - 力扣（LeetCode）</a></h3><p>没学过位运算啊…边学边写的 明天写一下位运算的博客吧</p><p>另外记一下位运算分治简化版的原理:</p><ul><li>原数据为:12345678</li><li>第一轮 奇偶位交换 21436587</li><li>第二轮 每两位交换 43218765</li><li>第三轮 每四位交换 87654321</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverseBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> (n &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">                ans |= (<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题解好理解一点:<a href="https://leetcode.cn/problems/reverse-bits/solutions/686465/yi-ti-san-jie-dui-cheng-wei-zhu-wei-fen-ub1hi/?envType=study-plan-v2&envId=top-interview-150">190. 颠倒二进制位 - 力扣（LeetCode）</a></p><p>如果某一位是 1 的话，则将答案相应的对称位置修改为 1</p><h3 id="191-位1的个数-力扣（LeetCode）"><a href="#191-位1的个数-力扣（LeetCode）" class="headerlink" title="191. 位1的个数 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/number-of-1-bits/?envType=study-plan-v2&envId=top-interview-150">191. 位1的个数 - 力扣（LeetCode）</a></h3><p>这个比上面那道简单多了,这道作入门比较合适</p><p>就是遍历32位判断每位是否是1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            ans+=(<span class="number">1</span>&amp;(n&gt;&gt;i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3"><a href="#7-3" class="headerlink" title="7.3"></a>7.3</h2><h3 id="105-从前序与中序遍历序列构造二叉树-力扣（LeetCode）"><a href="#105-从前序与中序遍历序列构造二叉树-力扣（LeetCode）" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&envId=top-interview-150">105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）</a></h3><p>分治,每次从中序数组划分左子树右子树然后分别建树,子数组长度为一时返回节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> leftP, <span class="type">int</span> rightP,<span class="type">int</span>[] inorder, <span class="type">int</span> leftI, <span class="type">int</span> rightI)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftP==rightP) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[leftP]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(leftP&gt;rightP) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[leftP]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">indexI</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=leftI;i&lt;=rightI;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i]==preorder[leftP])&#123;</span><br><span class="line">                indexI = i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">indexP</span> <span class="operator">=</span> indexI - leftI;</span><br><span class="line">        node.left = build(preorder,leftP+<span class="number">1</span>,leftP+indexP,inorder,leftI,indexI-<span class="number">1</span>);</span><br><span class="line">        node.right = build(preorder, leftP+indexP+<span class="number">1</span>,rightP,inorder,indexI+<span class="number">1</span>,rightI);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大佬的思路: 维护前序和中序遍历的索引, 直接省去每次分治寻找中序节点的遍历时间, 我好笨😭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> in, pre; <span class="comment">// 中序遍历索引和前序遍历索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> buildTree(preorder, inorder, (<span class="type">int</span>) <span class="number">4e3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder, <span class="type">int</span> stop)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre == preorder.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inorder[in] == stop) &#123; <span class="comment">// 类似于栈，左子树遍历完会回溯到根节点</span></span><br><span class="line">            in++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> preorder[pre++];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        root.left = buildTree(preorder, inorder, val);</span><br><span class="line">        root.right = buildTree(preorder,inorder, stop);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="106-从中序与后序遍历序列构造二叉树-力扣（LeetCode）"><a href="#106-从中序与后序遍历序列构造二叉树-力扣（LeetCode）" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/?envType=study-plan-v2&envId=top-interview-150">106. 从中序与后序遍历序列构造二叉树 - 力扣（LeetCode）</a></h3><p>跟上面那道题差不多,区别在于前序是从前往后遍历,先建左子树再建右子树; 后序是从后往前遍历,先建右子树再建左子树; 同时中序数组找根节点的遍历顺序会极大影响遍历时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> post; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        post = postorder.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> build(inorder, postorder, <span class="number">0</span>, postorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder, <span class="type">int</span> leftI, <span class="type">int</span> rightI)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(leftI&gt;rightI) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">indexI</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=rightI;i&gt;=leftI;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i]==postorder[post])&#123;</span><br><span class="line">                indexI = i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(postorder[post--]);</span><br><span class="line">        root.right = build(inorder,postorder,indexI+<span class="number">1</span>,rightI);</span><br><span class="line">        root.left = build(inorder,postorder,leftI,indexI-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="136-只出现一次的数字-力扣（LeetCode）"><a href="#136-只出现一次的数字-力扣（LeetCode）" class="headerlink" title="136. 只出现一次的数字 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/single-number/description/?envType=study-plan-v2&envId=top-interview-150">136. 只出现一次的数字 - 力扣（LeetCode）</a></h3><p>简单的异或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) ans^=nums[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="137-只出现一次的数字-II-力扣（LeetCode）"><a href="#137-只出现一次的数字-II-力扣（LeetCode）" class="headerlink" title="137. 只出现一次的数字 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/single-number-ii/description/?envType=study-plan-v2&envId=top-interview-150">137. 只出现一次的数字 II - 力扣（LeetCode）</a></h3><p>对每个数字遍历32位数相加后每位求%3, 剩下的就是只出现了一次的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num:nums) count+=num&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">            ans|=(count%<span class="number">3</span>&lt;&lt;i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大佬的题解我是不可能想得出来了:<a href="https://leetcode.cn/problems/single-number-ii/solutions/8944/single-number-ii-mo-ni-san-jin-zhi-fa-by-jin407891/?envType=study-plan-v2&envId=top-interview-150">137. 只出现一次的数字 II - 力扣（LeetCode）</a></p><h3 id="201-数字范围按位与-力扣（LeetCode）"><a href="#201-数字范围按位与-力扣（LeetCode）" class="headerlink" title="201. 数字范围按位与 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/bitwise-and-of-numbers-range/description/?envType=study-plan-v2&envId=top-interview-150">201. 数字范围按位与 - 力扣（LeetCode）</a></h3><p>没有想到求公共前缀, 一个个遍历过去随随便便就超时了, 最后还是看题解了</p><p>贴个评论区老哥优雅又便于理解的题解:<img src="https://pic.joking7.com/202407040344185.png" alt="image-20240704034433099"></p><p>超时解法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeBitwiseAnd</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(right==<span class="number">2147483647</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=left;k&lt;=right&amp;&amp;k!=-<span class="number">2147483648</span>;k++)&#123;</span><br><span class="line">                    <span class="type">int</span> kk= k&gt;&gt;i;</span><br><span class="line">                    <span class="keyword">if</span>((kk&amp;<span class="number">1</span>)!=<span class="number">1</span>) &#123;</span><br><span class="line">                        flag=<span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=left;k&lt;=right;k++)&#123;</span><br><span class="line">                    <span class="type">int</span> kk= k&gt;&gt;i;</span><br><span class="line">                    <span class="keyword">if</span>((kk&amp;<span class="number">1</span>)!=<span class="number">1</span>) &#123;</span><br><span class="line">                        flag=<span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) ans|=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>天才解法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeBitwiseAnd</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">shift</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 找到公共前缀</span></span><br><span class="line">        <span class="keyword">while</span> (m != n) &#123;</span><br><span class="line">            m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            ++shift;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m &lt;&lt; shift;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h2><h3 id="66-加一-力扣（LeetCode）"><a href="#66-加一-力扣（LeetCode）" class="headerlink" title="66. 加一 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/plus-one/description/?envType=study-plan-v2&envId=top-interview-150">66. 加一 - 力扣（LeetCode）</a></h3><p>从后往前遍历 一个有意思的地方: 注意遍历完成后自动确认了数组为1 0 0 0 …. 还有就是学习了Java复制数组的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=digits.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i]==<span class="number">9</span>)&#123;</span><br><span class="line">                digits[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                digits[i]++;<span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] newDigits = <span class="keyword">new</span> <span class="title class_">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">        System.arraycopy(digits,<span class="number">0</span>,newDigits,<span class="number">1</span>,digits.length);</span><br><span class="line">        newDigits[<span class="number">0</span>]=<span class="number">1</span>;digits=newDigits;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="69-x-的平方根-力扣（LeetCode）"><a href="#69-x-的平方根-力扣（LeetCode）" class="headerlink" title="69. x 的平方根 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/sqrtx/description/?envType=study-plan-v2&envId=top-interview-150">69. x 的平方根 - 力扣（LeetCode）</a></h3><p>有想到用二分查找,结果最后写出来是0.5个二分查找…只找了下界然后累加到答案 遇到特殊数据估计就跪了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">xx</span> <span class="operator">=</span> (<span class="type">long</span>) x;</span><br><span class="line">        <span class="type">long</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">long</span>) (<span class="number">1e10</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(!((index*index)&lt;=xx&amp;&amp;((index+<span class="number">1</span>)*(index+<span class="number">1</span>)&gt;xx)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(index*index&gt;xx)&#123;</span><br><span class="line">                index/=<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((index+<span class="number">1</span>)*(index+<span class="number">1</span>)&lt;xx)&#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((index+<span class="number">1</span>)*(index+<span class="number">1</span>)==xx)&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">int</span>) (index+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常的二分查找:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = x, ans=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+(right-left)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">long</span>)mid*mid&lt;=x)&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分还是非常难写的啊… 还有用位运算的大神…你无敌了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0x40000000</span>, y = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m != <span class="number">0</span>)&#123;</span><br><span class="line">            b = y ^ m;</span><br><span class="line">            y = y &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= b)&#123;</span><br><span class="line">                x = x - b;</span><br><span class="line">                y = y ^ m;</span><br><span class="line">            &#125;</span><br><span class="line">            m = m &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="50-Pow-x-n-力扣（LeetCode）"><a href="#50-Pow-x-n-力扣（LeetCode）" class="headerlink" title="50. Pow(x, n) - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/powx-n/description/?envType=study-plan-v2&envId=top-interview-150">50. Pow(x, n) - 力扣（LeetCode）</a></h3><p><del>return Math.pow(x,n);</del> 分治, 如果幂不能为2整除则平方之后再乘一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;=<span class="number">0</span> ? fun(x,n) : (<span class="number">1.0</span>/fun(x,-n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">fun</span><span class="params">(<span class="type">double</span> x,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> fun(x,n/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> y*y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> y*y*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="74-搜索二维矩阵-力扣（LeetCode）"><a href="#74-搜索二维矩阵-力扣（LeetCode）" class="headerlink" title="74. 搜索二维矩阵 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix/description/?envType=study-plan-v2&envId=top-interview-150">74. 搜索二维矩阵 - 力扣（LeetCode）</a></h3><p>两种方法, 一种是两次二分法分别找行列; 一种是拼接二维矩阵成一维矩阵后一次二分查找;  偷懒只写了遍历找行二分找列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> row=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;matrix.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][matrix[<span class="number">0</span>].length-<span class="number">1</span>]&gt;=target&amp;&amp;matrix[i][<span class="number">0</span>]&lt;=target)&#123;</span><br><span class="line">                row=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(row==-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = matrix[<span class="number">0</span>].length-<span class="number">1</span>, ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[row][mid]&lt;=target)&#123;</span><br><span class="line">                ans = matrix[row][mid];</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans==target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一次二分法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = matrix.length*matrix[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(matrix[mid/matrix[<span class="number">0</span>].length][mid%matrix[<span class="number">0</span>].length]&lt;target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[mid/matrix[<span class="number">0</span>].length][mid%matrix[<span class="number">0</span>].length]&gt;target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="162-寻找峰值-力扣（LeetCode）"><a href="#162-寻找峰值-力扣（LeetCode）" class="headerlink" title="162. 寻找峰值 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-peak-element/description/?envType=study-plan-v2&envId=top-interview-150">162. 寻找峰值 - 力扣（LeetCode）</a></h3><p>二分法的二段性…证明每个数组都肯定有解后就能用二分了 三叶姐的分析:<a href="https://leetcode.cn/problems/find-peak-element/solutions/998441/gong-shui-san-xie-noxiang-xin-ke-xue-xi-qva7v/?envType=study-plan-v2&envId=top-interview-150">162. 寻找峰值 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = nums.length - <span class="number">1</span>, m;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[m] &gt; nums[m + <span class="number">1</span>]) &#123;</span><br><span class="line">                r = m;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h2><h3 id="200-岛屿数量-力扣（LeetCode）"><a href="#200-岛屿数量-力扣（LeetCode）" class="headerlink" title="200. 岛屿数量 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/number-of-islands/description/?envType=study-plan-v2&envId=top-interview-150">200. 岛屿数量 - 力扣（LeetCode）</a></h3><p>DFS遍历 对边界问题有两种解决方法: 一种是加判断,容易写错; 一种是扩大一圈原数组,消耗内存会变大一点:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩大</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">char</span> [][]grid;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grid=<span class="keyword">new</span> <span class="title class_">char</span>[grid.length+<span class="number">2</span>][grid[<span class="number">0</span>].length+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; grid.length;i++)&#123;</span><br><span class="line">            System.arraycopy(grid[i],<span class="number">0</span>,<span class="built_in">this</span>.grid[i+<span class="number">1</span>],<span class="number">1</span>,grid[<span class="number">0</span>].length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=grid.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=grid[<span class="number">0</span>].length;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.grid[i][k]==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    ans++;paint(i,k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[i][k]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            grid[i][k]=<span class="number">0</span>;</span><br><span class="line">            paint(i,k-<span class="number">1</span>);</span><br><span class="line">            paint(i,k+<span class="number">1</span>);</span><br><span class="line">            paint(i+<span class="number">1</span>,k);</span><br><span class="line">            paint(i-<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加判断</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max_i,max_k;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        max_i = grid.length;</span><br><span class="line">        max_k = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;grid.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;grid[<span class="number">0</span>].length;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][k]==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    ans++;paint(i,k,grid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k,<span class="type">char</span>[][] grid)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inArea(i,k)&amp;&amp;grid[i][k]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            grid[i][k]=<span class="number">0</span>;</span><br><span class="line">            paint(i,k-<span class="number">1</span>,grid);</span><br><span class="line">            paint(i,k+<span class="number">1</span>,grid);</span><br><span class="line">            paint(i+<span class="number">1</span>,k,grid);</span><br><span class="line">            paint(i-<span class="number">1</span>,k,grid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">inArea</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i&gt;=<span class="number">0</span>&amp;&amp;i&lt;max_i&amp;&amp;k&gt;=<span class="number">0</span>&amp;&amp;k&lt;max_k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="130-被围绕的区域-力扣（LeetCode）"><a href="#130-被围绕的区域-力扣（LeetCode）" class="headerlink" title="130. 被围绕的区域 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/surrounded-regions/description/?envType=study-plan-v2&envId=top-interview-150">130. 被围绕的区域 - 力扣（LeetCode）</a></h3><p>从外围找连通的方块,标记 最后将未标记的方块全部换成X 标记的换成O</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">0</span>][i] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                dfs(board, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (board[m - <span class="number">1</span>][i] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                dfs(board, m - <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                dfs(board, i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (board[i][n - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">                dfs(board, i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replaceChar(board, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;X&#x27;</span>);</span><br><span class="line">        replaceChar(board, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; m - <span class="number">1</span> || y &lt; <span class="number">0</span> || y &gt; n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (board[x][y] != <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        dfs(board, x - <span class="number">1</span>, y);</span><br><span class="line">        dfs(board, x + <span class="number">1</span>, y);</span><br><span class="line">        dfs(board, x, y - <span class="number">1</span>);</span><br><span class="line">        dfs(board, x, y + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceChar</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">char</span> s, <span class="type">char</span> t)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == s) &#123;</span><br><span class="line">                    board[i][j] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="133-克隆图-力扣（LeetCode）"><a href="#133-克隆图-力扣（LeetCode）" class="headerlink" title="133. 克隆图 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/clone-graph/description/?envType=study-plan-v2&envId=top-interview-150">133. 克隆图 - 力扣（LeetCode）</a></h3><p>无向图的遍历问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    HashMap&lt;Node,Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">cloneGraph</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(node)) <span class="keyword">return</span> map.get(node);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">nodeCopy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(node.val,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;());</span><br><span class="line">        map.put(node,nodeCopy);</span><br><span class="line">        <span class="keyword">for</span>(Node nodeNeighbor:node.neighbors)&#123;</span><br><span class="line">            nodeCopy.neighbors.add(cloneGraph(nodeNeighbor));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodeCopy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="207-课程表-力扣（LeetCode）"><a href="#207-课程表-力扣（LeetCode）" class="headerlink" title="207. 课程表 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/course-schedule/description/?envType=study-plan-v2&envId=top-interview-150">207. 课程表 - 力扣（LeetCode）</a></h3><p>题解:<a href="https://leetcode.cn/problems/course-schedule/solutions/250377/bao-mu-shi-ti-jie-shou-ba-shou-da-tong-tuo-bu-pai-/?envType=study-plan-v2&envId=top-interview-150">207. 课程表 - 力扣（LeetCode）</a> 记录每个课程需要的前置课程数,课程完成后将需要它作为前置课程的课程的前置课程数减一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []courseNeed = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; dependency = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numCourses;i++)&#123;</span><br><span class="line">            dependency.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> []prerequisite:prerequisites)&#123;</span><br><span class="line">            courseNeed[prerequisite[<span class="number">0</span>]]++;</span><br><span class="line">            dependency.get(prerequisite[<span class="number">1</span>]).add(prerequisite[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++)</span><br><span class="line">            <span class="keyword">if</span>(courseNeed[i] == <span class="number">0</span>)</span><br><span class="line">                queue.add(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            numCourses--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> cur : dependency.get(pre))&#123;</span><br><span class="line">                <span class="keyword">if</span>(--courseNeed[cur] == <span class="number">0</span>)</span><br><span class="line">                    queue.add(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numCourses==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="210-课程表-II-力扣（LeetCode）"><a href="#210-课程表-II-力扣（LeetCode）" class="headerlink" title="210. 课程表 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/course-schedule-ii/description/?envType=study-plan-v2&envId=top-interview-150">210. 课程表 II - 力扣（LeetCode）</a></h3><p>稍微修改一下上面的题目, 使课程完成时加入ans数组中, 最后判断一下完成了多少课程来返回ans或空数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findOrder(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) &#123;</span><br><span class="line">        <span class="type">int</span> []courseNeed = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; dependency = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> [] ans = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];<span class="type">int</span> <span class="variable">ansIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numCourses;i++)&#123;</span><br><span class="line">            dependency.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> []prerequisite:prerequisites)&#123;</span><br><span class="line">            courseNeed[prerequisite[<span class="number">0</span>]]++;</span><br><span class="line">            dependency.get(prerequisite[<span class="number">1</span>]).add(prerequisite[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++)</span><br><span class="line">            <span class="keyword">if</span>(courseNeed[i] == <span class="number">0</span>)</span><br><span class="line">                queue.add(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            ans[ansIndex] = pre; ansIndex++;</span><br><span class="line">            numCourses--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> cur : dependency.get(pre))&#123;</span><br><span class="line">                <span class="keyword">if</span>(--courseNeed[cur] == <span class="number">0</span>)</span><br><span class="line">                    queue.add(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(numCourses==<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel部署Meting-API并添加网易云cookie</title>
      <link href="/2024/06/21/%E8%87%AA%E5%BB%BAMetingJS-API%E5%B9%B6%E6%B7%BB%E5%8A%A0cookie/"/>
      <url>/2024/06/21/%E8%87%AA%E5%BB%BAMetingJS-API%E5%B9%B6%E6%B7%BB%E5%8A%A0cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前排提醒:<strong>绑定cookie可能会有未知风险</strong></p><p>前排再次提醒:<strong>网易云音乐cookie可能会过期,更换新的cookie就好</strong></p><p>anzhiyu主题自带的音乐馆使用了metingJs插件来提供音乐播放器的功能, 但是metingJs默认提供的API有抽风&#x2F;下线&#x2F;跑路的风险, 而且最重要的是: 听不了VIP歌曲</p><p><img src="https://pic.joking7.com/2024-06-27-19-17-42" alt="2024-06-27-19-17-42"></p><p>部署自建metingJs-api并添加有VIP权限的账号的cookie就能解决上面的问题</p><h2 id="1-Vercel部署MetingAPI"><a href="#1-Vercel部署MetingAPI" class="headerlink" title="1 Vercel部署MetingAPI"></a>1 Vercel部署MetingAPI</h2><p>首先点击下方链接去Vercel部署项目:</p><p><a href="https://vercel.com/new/clone?s=https://github.com/xizeyoupan/Meting-API&showOptionalTeamCreation=false">Vercel部署Meting</a></p><p>填好名字后点击Create创建项目:</p><p><img src="https://pic.joking7.com/2024-06-27-18-08-31" alt="2024-06-27-18-08-31"></p><p>之后点击Add Domain查看接口url,注意Vercel在国内被墙了,想要在国内访问的话需要绑定自己的域名:</p><p><img src="https://pic.joking7.com/2024-06-27-18-13-41" alt="2024-06-27-18-13-41"></p><p>到此Vercel部署MetingAPI已成功</p><h2 id="2-获取网易云音乐账号cookie"><a href="#2-获取网易云音乐账号cookie" class="headerlink" title="2 获取网易云音乐账号cookie"></a>2 获取网易云音乐账号cookie</h2><p>注意:<strong>cookie就是你的账号,所以不要泄露出去</strong></p><p>登录网易云网页版并随便点进一首歌,按F12后找到下面的Cookie:</p><p><img src="https://pic.joking7.com/2024-06-27-19-00-17" alt="2024-06-27-19-00-17"></p><p>将cookie字段的字符串全部复制备用(这里我不知道哪些是要用到的字段所以就全部复制了,如果你知道可以只复制指定的字段)</p><h2 id="3-添加网易云cookie"><a href="#3-添加网易云cookie" class="headerlink" title="3 添加网易云cookie"></a>3 添加网易云cookie</h2><p>之前Vercel部署MetingAPI的时候自动往你的Github下创建了一个同名项目,找到上面创建的Github项目下的src&#x2F;providers&#x2F;netease&#x2F;util.js文件</p><p><img src="https://pic.joking7.com/2024-06-27-18-28-39" alt="2024-06-27-18-28-39"></p><p>替换成下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> encrypt <span class="keyword">from</span> <span class="string">&#x27;./crypto.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; net_ease_anonymous_token &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; customAlphabet &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid/non-secure&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nanoid = <span class="title function_">customAlphabet</span>(<span class="string">&#x27;1234567890abcdef&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cookie字符串</span></span><br><span class="line"><span class="keyword">const</span> customCookieString = <span class="string">`</span></span><br><span class="line"><span class="string">这里填你的网易云cookie</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将cookie字符串转换为对象</span></span><br><span class="line"><span class="keyword">const</span> customCookieObject = customCookieString.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cookie</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, ...rest] = cookie.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    acc[key] = rest.<span class="title function_">join</span>(<span class="string">&#x27;=&#x27;</span>); <span class="comment">// 处理值中包含等号的情况</span></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">chooseUserAgent</span> = (<span class="params">ua = <span class="literal">false</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> userAgentList = &#123;</span><br><span class="line">        <span class="attr">mobile</span>: [</span><br><span class="line">            <span class="comment">// iOS 13.5.1 14.0 beta with safari</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.&#x27;</span>,</span><br><span class="line">            <span class="comment">// iOS with qq micromsg</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/602.1.50 (KHTML like Gecko) Mobile/14A456 QQ/6.5.7.408 V1_IPH_SQ_6.5.7_1_APP_A Pixel/750 Core/UIWebView NetType/4G Mem/103&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/7.0.15(0x17000f27) NetType/WIFI Language/zh&#x27;</span>,</span><br><span class="line">            <span class="comment">// Android -&gt; Huawei Xiaomi</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; Android 9; PCT-AL10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.64 HuaweiBrowser/10.0.3.311 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 9; zh-cn; Redmi Note 8 Build/PKQ1.190616.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.141 Mobile Safari/537.36 XiaoMi/MiuiBrowser/12.5.22&#x27;</span>,</span><br><span class="line">            <span class="comment">// Android + qq micromsg</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; Android 10; YAL-AL00 Build/HUAWEIYAL-AL00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/78.0.3904.62 XWEB/2581 MMWEBSDK/200801 Mobile Safari/537.36 MMWEBID/3027 MicroMessenger/7.0.18.1740(0x27001235) Process/toolsmp WeChat/arm64 NetType/WIFI Language/zh_CN ABI/arm64&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-cn; BKK-AL10 Build/HONORBKK-AL10) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/10.6 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">pc</span>: [</span><br><span class="line">            <span class="comment">// macOS 10.15.6  Firefox / Chrome / Safari</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:80.0) Gecko/20100101 Firefox/80.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.30 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.2 Safari/605.1.15&#x27;</span>,</span><br><span class="line">            <span class="comment">// Windows 10 Firefox / Chrome / Edge</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.30 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586&#x27;</span>,</span><br><span class="line">            <span class="comment">// Linux 就算了</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> realUserAgentList =</span><br><span class="line">        userAgentList[ua] || userAgentList.<span class="property">mobile</span>.<span class="title function_">concat</span>(userAgentList.<span class="property">pc</span>)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;pc&#x27;</span>, <span class="literal">false</span>].<span class="title function_">indexOf</span>(ua) &gt; -<span class="number">1</span></span><br><span class="line">        ? realUserAgentList[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * realUserAgentList.<span class="property">length</span>)]</span><br><span class="line">        : ua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cnip</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//国内城市IP段</span></span><br><span class="line">    <span class="keyword">const</span> ips = <span class="string">&#x27;58.14.0.0,58.16.0.0,58.24.0.0,58.30.0.0,58.32.0.0,58.66.0.0,58.68.128.0,58.82.0.0,58.87.64.0,58.99.128.0,58.100.0.0,58.116.0.0,58.128.0.0,58.144.0.0,58.154.0.0,58.192.0.0,58.240.0.0,59.32.0.0,59.64.0.0,59.80.0.0,59.107.0.0,59.108.0.0,59.151.0.0,59.155.0.0,59.172.0.0,59.191.0.0,59.191.240.0,59.192.0.0,60.0.0.0,60.55.0.0,60.63.0.0,60.160.0.0,60.194.0.0,60.200.0.0,60.208.0.0,60.232.0.0,60.235.0.0,60.245.128.0,60.247.0.0,60.252.0.0,60.253.128.0,60.255.0.0,61.4.80.0,61.4.176.0,61.8.160.0,61.28.0.0,61.29.128.0,61.45.128.0,61.47.128.0,61.48.0.0,61.87.192.0,61.128.0.0,61.232.0.0,61.236.0.0,61.240.0.0,114.28.0.0,114.54.0.0,114.60.0.0,114.64.0.0,114.68.0.0,114.80.0.0,116.1.0.0,116.2.0.0,116.4.0.0,116.8.0.0,116.13.0.0,116.16.0.0,116.52.0.0,116.56.0.0,116.58.128.0,116.58.208.0,116.60.0.0,116.66.0.0,116.69.0.0,116.70.0.0,116.76.0.0,116.89.144.0,116.90.184.0,116.95.0.0,116.112.0.0,116.116.0.0,116.128.0.0,116.192.0.0,116.193.16.0,116.193.32.0,116.194.0.0,116.196.0.0,116.198.0.0,116.199.0.0,116.199.128.0,116.204.0.0,116.207.0.0,116.208.0.0,116.212.160.0,116.213.64.0,116.213.128.0,116.214.32.0,116.214.64.0,116.214.128.0,116.215.0.0,116.216.0.0,116.224.0.0,116.242.0.0,116.244.0.0,116.248.0.0,116.252.0.0,116.254.128.0,116.255.128.0,117.8.0.0,117.21.0.0,117.22.0.0,117.24.0.0,117.32.0.0,117.40.0.0,117.44.0.0,117.48.0.0,117.53.48.0,117.53.176.0,117.57.0.0,117.58.0.0,117.59.0.0,117.60.0.0,117.64.0.0,117.72.0.0,117.74.64.0,117.74.128.0,117.75.0.0,117.76.0.0,117.80.0.0,117.100.0.0,117.103.16.0,117.103.128.0,117.106.0.0,117.112.0.0,117.120.64.0,117.120.128.0,117.121.0.0,117.121.128.0,117.121.192.0,117.122.128.0,117.124.0.0,117.128.0.0,118.24.0.0,118.64.0.0,118.66.0.0,118.67.112.0,118.72.0.0,118.80.0.0,118.84.0.0,118.88.32.0,118.88.64.0,118.88.128.0,118.89.0.0,118.91.240.0,118.102.16.0,118.112.0.0,118.120.0.0,118.124.0.0,118.126.0.0,118.132.0.0,118.144.0.0,118.178.0.0,118.180.0.0,118.184.0.0,118.192.0.0,118.212.0.0,118.224.0.0,118.228.0.0,118.230.0.0,118.239.0.0,118.242.0.0,118.244.0.0,118.248.0.0,119.0.0.0,119.2.0.0,119.2.128.0,119.3.0.0,119.4.0.0,119.8.0.0,119.10.0.0,119.15.136.0,119.16.0.0,119.18.192.0,119.18.208.0,119.18.224.0,119.19.0.0,119.20.0.0,119.27.64.0,119.27.160.0,119.27.192.0,119.28.0.0,119.30.48.0,119.31.192.0,119.32.0.0,119.40.0.0,119.40.64.0,119.40.128.0,119.41.0.0,119.42.0.0,119.42.136.0,119.42.224.0,119.44.0.0,119.48.0.0,119.57.0.0,119.58.0.0,119.59.128.0,119.60.0.0,119.62.0.0,119.63.32.0,119.75.208.0,119.78.0.0,119.80.0.0,119.84.0.0,119.88.0.0,119.96.0.0,119.108.0.0,119.112.0.0,119.128.0.0,119.144.0.0,119.148.160.0,119.161.128.0,119.162.0.0,119.164.0.0,119.176.0.0,119.232.0.0,119.235.128.0,119.248.0.0,119.253.0.0,119.254.0.0,120.0.0.0,120.24.0.0,120.30.0.0,120.32.0.0,120.48.0.0,120.52.0.0,120.64.0.0,120.72.32.0,120.72.128.0,120.76.0.0,120.80.0.0,120.90.0.0,120.92.0.0,120.94.0.0,120.128.0.0,120.136.128.0,120.137.0.0,120.192.0.0,121.0.16.0,121.4.0.0,121.8.0.0,121.16.0.0,121.32.0.0,121.40.0.0,121.46.0.0,121.48.0.0,121.51.0.0,121.52.160.0,121.52.208.0,121.52.224.0,121.55.0.0,121.56.0.0,121.58.0.0,121.58.144.0,121.59.0.0,121.60.0.0,121.68.0.0,121.76.0.0,121.79.128.0,121.89.0.0,121.100.128.0,121.101.208.0,121.192.0.0,121.201.0.0,121.204.0.0,121.224.0.0,121.248.0.0,121.255.0.0,122.0.64.0,122.0.128.0,122.4.0.0,122.8.0.0,122.48.0.0,122.49.0.0,122.51.0.0,122.64.0.0,122.96.0.0,122.102.0.0,122.102.64.0,122.112.0.0,122.119.0.0,122.136.0.0,122.144.128.0,122.152.192.0,122.156.0.0,122.192.0.0,122.198.0.0,122.200.64.0,122.204.0.0,122.224.0.0,122.240.0.0,122.248.48.0,123.0.128.0,123.4.0.0,123.8.0.0,123.49.128.0,123.52.0.0,123.56.0.0,123.64.0.0,123.96.0.0,123.98.0.0,123.99.128.0,123.100.0.0,123.101.0.0,123.103.0.0,123.108.128.0,123.108.208.0,123.112.0.0,123.128.0.0,123.136.80.0,123.137.0.0,123.138.0.0,123.144.0.0,123.160.0.0,123.176.80.0,123.177.0.0,123.178.0.0,123.180.0.0,123.184.0.0,123.196.0.0,123.199.128.0,123.206.0.0,123.232.0.0,123.242.0.0,123.244.0.0,123.249.0.0,123.253.0.0,124.6.64.0,124.14.0.0,124.16.0.0,124.20.0.0,124.28.192.0,124.29.0.0,124.31.0.0,124.40.112.0,124.40.128.0,124.42.0.0,124.47.0.0,124.64.0.0,124.66.0.0,124.67.0.0,124.68.0.0,124.72.0.0,124.88.0.0,124.108.8.0,124.108.40.0,124.112.0.0,124.126.0.0,124.128.0.0,124.147.128.0,124.156.0.0,124.160.0.0,124.172.0.0,124.192.0.0,124.196.0.0,124.200.0.0,124.220.0.0,124.224.0.0,124.240.0.0,124.240.128.0,124.242.0.0,124.243.192.0,124.248.0.0,124.249.0.0,124.250.0.0,124.254.0.0,125.31.192.0,125.32.0.0,125.58.128.0,125.61.128.0,125.62.0.0,125.64.0.0,125.96.0.0,125.98.0.0,125.104.0.0,125.112.0.0,125.169.0.0,125.171.0.0,125.208.0.0,125.210.0.0,125.213.0.0,125.214.96.0,125.215.0.0,125.216.0.0,125.254.128.0,134.196.0.0,159.226.0.0,161.207.0.0,162.105.0.0,166.111.0.0,167.139.0.0,168.160.0.0,169.211.1.0,192.83.122.0,192.83.169.0,192.124.154.0,192.188.170.0,198.17.7.0,202.0.110.0,202.0.176.0,202.4.128.0,202.4.252.0,202.8.128.0,202.10.64.0,202.14.88.0,202.14.235.0,202.14.236.0,202.14.238.0,202.20.120.0,202.22.248.0,202.38.0.0,202.38.64.0,202.38.128.0,202.38.136.0,202.38.138.0,202.38.140.0,202.38.146.0,202.38.149.0,202.38.150.0,202.38.152.0,202.38.156.0,202.38.158.0,202.38.160.0,202.38.164.0,202.38.168.0,202.38.176.0,202.38.184.0,202.38.192.0,202.41.152.0,202.41.240.0,202.43.144.0,202.46.32.0,202.46.224.0,202.60.112.0,202.63.248.0,202.69.4.0,202.69.16.0,202.70.0.0,202.74.8.0,202.75.208.0,202.85.208.0,202.90.0.0,202.90.224.0,202.90.252.0,202.91.0.0,202.91.128.0,202.91.176.0,202.91.224.0,202.92.0.0,202.92.252.0,202.93.0.0,202.93.252.0,202.95.0.0,202.95.252.0,202.96.0.0,202.112.0.0,202.120.0.0,202.122.0.0,202.122.32.0,202.122.64.0,202.122.112.0,202.122.128.0,202.123.96.0,202.124.24.0,202.125.176.0,202.127.0.0,202.127.12.0,202.127.16.0,202.127.40.0,202.127.48.0,202.127.112.0,202.127.128.0,202.127.160.0,202.127.192.0,202.127.208.0,202.127.212.0,202.127.216.0,202.127.224.0,202.130.0.0,202.130.224.0,202.131.16.0,202.131.48.0,202.131.208.0,202.136.48.0,202.136.208.0,202.136.224.0,202.141.160.0,202.142.16.0,202.143.16.0,202.148.96.0,202.149.160.0,202.149.224.0,202.150.16.0,202.152.176.0,202.153.48.0,202.158.160.0,202.160.176.0,202.164.0.0,202.164.25.0,202.165.96.0,202.165.176.0,202.165.208.0,202.168.160.0,202.170.128.0,202.170.216.0,202.173.8.0,202.173.224.0,202.179.240.0,202.180.128.0,202.181.112.0,202.189.80.0,202.192.0.0,203.18.50.0,203.79.0.0,203.80.144.0,203.81.16.0,203.83.56.0,203.86.0.0,203.86.64.0,203.88.32.0,203.88.192.0,203.89.0.0,203.90.0.0,203.90.128.0,203.90.192.0,203.91.32.0,203.91.96.0,203.91.120.0,203.92.0.0,203.92.160.0,203.93.0.0,203.94.0.0,203.95.0.0,203.95.96.0,203.99.16.0,203.99.80.0,203.100.32.0,203.100.80.0,203.100.96.0,203.100.192.0,203.110.160.0,203.118.192.0,203.119.24.0,203.119.32.0,203.128.32.0,203.128.96.0,203.130.32.0,203.132.32.0,203.134.240.0,203.135.96.0,203.135.160.0,203.142.219.0,203.148.0.0,203.152.64.0,203.156.192.0,203.158.16.0,203.161.192.0,203.166.160.0,203.171.224.0,203.174.7.0,203.174.96.0,203.175.128.0,203.175.192.0,203.176.168.0,203.184.80.0,203.187.160.0,203.190.96.0,203.191.16.0,203.191.64.0,203.191.144.0,203.192.0.0,203.196.0.0,203.207.64.0,203.207.128.0,203.208.0.0,203.208.16.0,203.208.32.0,203.209.224.0,203.212.0.0,203.212.80.0,203.222.192.0,203.223.0.0,210.2.0.0,210.5.0.0,210.5.144.0,210.12.0.0,210.14.64.0,210.14.112.0,210.14.128.0,210.15.0.0,210.15.128.0,210.16.128.0,210.21.0.0,210.22.0.0,210.23.32.0,210.25.0.0,210.26.0.0,210.28.0.0,210.32.0.0,210.51.0.0,210.52.0.0,210.56.192.0,210.72.0.0,210.76.0.0,210.78.0.0,210.79.64.0,210.79.224.0,210.82.0.0,210.87.128.0,210.185.192.0,210.192.96.0,211.64.0.0,211.80.0.0,211.96.0.0,211.136.0.0,211.144.0.0,211.160.0.0,218.0.0.0,218.56.0.0,218.64.0.0,218.96.0.0,218.104.0.0,218.108.0.0,218.185.192.0,218.192.0.0,218.240.0.0,218.249.0.0,219.72.0.0,219.82.0.0,219.128.0.0,219.216.0.0,219.224.0.0,219.242.0.0,219.244.0.0,220.101.192.0,220.112.0.0,220.152.128.0,220.154.0.0,220.160.0.0,220.192.0.0,220.231.0.0,220.231.128.0,220.232.64.0,220.234.0.0,220.242.0.0,220.248.0.0,220.252.0.0,221.0.0.0,221.8.0.0,221.12.0.0,221.12.128.0,221.13.0.0,221.14.0.0,221.122.0.0,221.129.0.0,221.130.0.0,221.133.224.0,221.136.0.0,221.172.0.0,221.176.0.0,221.192.0.0,221.196.0.0,221.198.0.0,221.199.0.0,221.199.128.0,221.199.192.0,221.199.224.0,221.200.0.0,221.208.0.0,221.224.0.0,222.16.0.0,222.32.0.0,222.64.0.0,222.125.0.0,222.126.128.0,222.128.0.0,222.160.0.0,222.168.0.0,222.176.0.0,222.192.0.0,222.240.0.0,222.248.0.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> arr = ips.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> rnd = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * ((arr.<span class="property">length</span> - <span class="number">1</span>) - <span class="number">0</span> + <span class="number">1</span>) + <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> ip = arr[rnd];</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = <span class="keyword">async</span> (<span class="params">method, url, data = &#123;&#125;, options</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保options.cookie是一个对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">cookie</span> === <span class="string">&#x27;undefined&#x27;</span> || options.<span class="property">cookie</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        options.<span class="property">cookie</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并自定义cookie和用户定义的cookie（如果有）</span></span><br><span class="line">    options.<span class="property">cookie</span> = &#123;</span><br><span class="line">        ...customCookieObject,</span><br><span class="line">        ...options.<span class="property">cookie</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> headers = &#123; <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">chooseUserAgent</span>(options.<span class="property">ua</span>) &#125;</span><br><span class="line">    <span class="keyword">if</span> (method.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">        headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">includes</span>(<span class="string">&#x27;music.163.com&#x27;</span>))</span><br><span class="line">        headers[<span class="string">&#x27;Referer&#x27;</span>] = <span class="string">&#x27;https://music.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ip = <span class="title function_">cnip</span>() || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(ip)</span></span><br><span class="line">    <span class="keyword">if</span> (ip) &#123;</span><br><span class="line">        headers[<span class="string">&#x27;X-Real-IP&#x27;</span>] = ip</span><br><span class="line">        headers[<span class="string">&#x27;X-Forwarded-For&#x27;</span>] = ip</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// headers[&#x27;X-Real-IP&#x27;] = &#x27;118.88.88.88&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">cookie</span> === <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">        options.<span class="property">cookie</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">cookie</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        options.<span class="property">cookie</span> = &#123;</span><br><span class="line">            ...options.<span class="property">cookie</span>,</span><br><span class="line">            <span class="attr">__remember_me</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// NMTID: nanoid(),</span></span><br><span class="line">            <span class="attr">_ntes_nuid</span>: <span class="title function_">nanoid</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">cookie</span>.<span class="property">MUSIC_U</span>) &#123;</span><br><span class="line">            <span class="comment">// 游客</span></span><br><span class="line">            <span class="keyword">if</span> (!options.<span class="property">cookie</span>.<span class="property">MUSIC_A</span>) &#123;</span><br><span class="line">                options.<span class="property">cookie</span>.<span class="property">MUSIC_A</span> = net_ease_anonymous_token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="title class_">Object</span>.<span class="title function_">keys</span>(options.<span class="property">cookie</span>)</span><br><span class="line">            .<span class="title function_">map</span>(</span><br><span class="line">                <span class="function">(<span class="params">key</span>) =&gt;</span></span><br><span class="line">                    <span class="built_in">encodeURIComponent</span>(key) +</span><br><span class="line">                    <span class="string">&#x27;=&#x27;</span> +</span><br><span class="line">                    <span class="built_in">encodeURIComponent</span>(options.<span class="property">cookie</span>[key]),</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">cookie</span>) &#123;</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = options.<span class="property">cookie</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="string">&#x27;__remember_me=true; NMTID=xxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(options.cookie, headers[&#x27;Cookie&#x27;])</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;weapi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> csrfToken = (headers[<span class="string">&#x27;Cookie&#x27;</span>] || <span class="string">&#x27;&#x27;</span>).<span class="title function_">match</span>(<span class="regexp">/_csrf=([^(;|$)]+)/</span>)</span><br><span class="line">        data.<span class="property">csrf_token</span> = csrfToken ? csrfToken[<span class="number">1</span>] : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        data = encrypt.<span class="title function_">weapi</span>(data)</span><br><span class="line">        url = url.<span class="title function_">replace</span>(<span class="regexp">/\w*api/</span>, <span class="string">&#x27;weapi&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;linuxapi&#x27;</span>) &#123;</span><br><span class="line">        data = encrypt.<span class="title function_">linuxapi</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>: method,</span><br><span class="line">            <span class="attr">url</span>: url.<span class="title function_">replace</span>(<span class="regexp">/\w*api/</span>, <span class="string">&#x27;api&#x27;</span>),</span><br><span class="line">            <span class="attr">params</span>: data,</span><br><span class="line">        &#125;)</span><br><span class="line">        headers[<span class="string">&#x27;User-Agent&#x27;</span>] =</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36&#x27;</span></span><br><span class="line">        url = <span class="string">&#x27;https://music.163.com/api/linux/forward&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;eapi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cookie = options.<span class="property">cookie</span> || &#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> csrfToken = cookie[<span class="string">&#x27;__csrf&#x27;</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> header = &#123;</span><br><span class="line">            <span class="attr">osver</span>: cookie.<span class="property">osver</span>, <span class="comment">//系统版本</span></span><br><span class="line">            <span class="attr">deviceId</span>: cookie.<span class="property">deviceId</span>, <span class="comment">//encrypt.base64.encode(imei + &#x27;\t02:00:00:00:00:00\t5106025eb79a5247\t70ffbaac7&#x27;)</span></span><br><span class="line">            <span class="attr">appver</span>: cookie.<span class="property">appver</span> || <span class="string">&#x27;8.7.01&#x27;</span>, <span class="comment">// app版本</span></span><br><span class="line">            <span class="attr">versioncode</span>: cookie.<span class="property">versioncode</span> || <span class="string">&#x27;140&#x27;</span>, <span class="comment">//版本号</span></span><br><span class="line">            <span class="attr">mobilename</span>: cookie.<span class="property">mobilename</span>, <span class="comment">//设备model</span></span><br><span class="line">            <span class="attr">buildver</span>: cookie.<span class="property">buildver</span> || <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">            <span class="attr">resolution</span>: cookie.<span class="property">resolution</span> || <span class="string">&#x27;1920x1080&#x27;</span>, <span class="comment">//设备分辨率</span></span><br><span class="line">            <span class="attr">__csrf</span>: csrfToken,</span><br><span class="line">            <span class="attr">os</span>: cookie.<span class="property">os</span> || <span class="string">&#x27;android&#x27;</span>,</span><br><span class="line">            <span class="attr">channel</span>: cookie.<span class="property">channel</span>,</span><br><span class="line">            <span class="attr">requestId</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">                .toString()</span></span></span><br><span class="line"><span class="subst"><span class="string">                .padStart(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">                &#125;</span> `</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cookie.<span class="property">MUSIC_U</span>) header[<span class="string">&#x27;MUSIC_U&#x27;</span>] = cookie.<span class="property">MUSIC_U</span></span><br><span class="line">        <span class="keyword">if</span> (cookie.<span class="property">MUSIC_A</span>) header[<span class="string">&#x27;MUSIC_A&#x27;</span>] = cookie.<span class="property">MUSIC_A</span></span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="title class_">Object</span>.<span class="title function_">keys</span>(header)</span><br><span class="line">            .<span class="title function_">map</span>(</span><br><span class="line">                <span class="function">(<span class="params">key</span>) =&gt;</span></span><br><span class="line">                    <span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(header[key]),</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">        data.<span class="property">header</span> = header</span><br><span class="line">        data = encrypt.<span class="title function_">eapi</span>(options.<span class="property">url</span>, data)</span><br><span class="line">        url = url.<span class="title function_">replace</span>(<span class="regexp">/\w*api/</span>, <span class="string">&#x27;eapi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> settings = &#123;</span><br><span class="line">        method,</span><br><span class="line">        headers,</span><br><span class="line">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(data).<span class="title function_">toString</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;eapi&#x27;</span>) &#123;</span><br><span class="line">        settings = &#123;</span><br><span class="line">            ...settings,</span><br><span class="line">            <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res, count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, settings)</span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;eapi&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> _ = <span class="keyword">await</span> res.<span class="title function_">arrayBuffer</span>(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> enc = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>()</span><br><span class="line">            res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(enc.<span class="title function_">decode</span>(_))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request <span class="subst">$&#123;count&#125;</span> times.`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Max retries exceeded.`</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>))</span><br><span class="line">    &#125; <span class="keyword">while</span> (res.<span class="property">code</span> == -<span class="number">460</span>)  <span class="comment">// &#123; code: -460, message: &#x27;网络太拥挤，请稍候再试！&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">map_song_list</span> = (<span class="params">song_list</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> song_list.<span class="property">songs</span>.<span class="title function_">map</span>(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> artists = song.<span class="property">ar</span> || song.<span class="property">artists</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: song.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">author</span>: artists.<span class="title function_">reduce</span>(<span class="function">(<span class="params">i, v</span>) =&gt;</span> ((i ? i + <span class="string">&quot; / &quot;</span> : i) + v.<span class="property">name</span>), <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            <span class="attr">pic</span>: song?.<span class="property">al</span>?.<span class="property">picUrl</span> || song.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">url</span>: song.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">lrc</span>: song.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将之前得到的网易云cookie替换到上面代码中的customCookieString,提交,访问之前Vercel项目url,查看是否可以访问歌曲,可以就成功了</p><h2 id="4-Hexo-Butterfly主题使用自建API"><a href="#4-Hexo-Butterfly主题使用自建API" class="headerlink" title="4 Hexo Butterfly主题使用自建API"></a>4 Hexo Butterfly主题使用自建API</h2><p>配置前确保安装并启用了APlayer插件</p><p>修改_config.butterfly.yml配置文件,填入你的Vercel项目api:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CDN</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work</span></span><br><span class="line"><span class="comment"># 非必要請不要修改</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="attr">meting_api:</span> <span class="string">&#x27;https://（你的Vercel项目api地址）/api/?server=:server&amp;type=:type&amp;id=:id&amp;auth=:auth&amp;r=:r&#x27;</span><span class="string">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然你要是也用anzhiyu主题的话使用方法也和上面一样</p><h2 id="5-效果展示"><a href="#5-效果展示" class="headerlink" title="5 效果展示"></a>5 效果展示</h2><p><img src="https://pic.joking7.com/2024-06-27-19-17-12" alt="2024-06-27-19-17-12"></p><p><a href="/music/?id=8480620009&server=netease">展示链接</a></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.sinzmise.top/posts/61417/">自建Meting服务 | 星空故事·魔法小屋 (sinzmise.top)</a></p><p><a href="https://blog.saop.cc/p/300/#%E5%BA%94%E7%94%A8%E4%BA%8E-hexo-%E7%9A%84-butterfly-%E4%B8%BB%E9%A2%98">部署Meting-API | 定の栈 (saop.cc)</a></p><p><a href="https://blog.anheyu.com/posts/a76e.html">♪(^∇^*)欢迎肥来！音乐meting自建api | 安知鱼 (anheyu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vercel </tag>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
