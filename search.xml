<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刷题记录</title>
      <link href="/2024/06/28/%E5%8A%9B%E6%89%A3/"/>
      <url>/2024/06/28/%E5%8A%9B%E6%89%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="6-28"><a href="#6-28" class="headerlink" title="6.28"></a>6.28</h2><h3 id="199-二叉树的右视图-力扣（LeetCode）"><a href="#199-二叉树的右视图-力扣（LeetCode）" class="headerlink" title="199. 二叉树的右视图 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/?envType=study-plan-v2&envId=top-interview-150">199. 二叉树的右视图 - 力扣（LeetCode）</a></h3><p>层序遍历后每层取最右边的结点储存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.toArray().length;</span><br><span class="line">            <span class="keyword">while</span>((len--)!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) &#123;queue.add(treeNode.left);&#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) &#123;queue.add(treeNode.right);&#125;</span><br><span class="line">                <span class="keyword">if</span>(len==<span class="number">0</span>) ans.add(treeNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="637-二叉树的层平均值-力扣（LeetCode）"><a href="#637-二叉树的层平均值-力扣（LeetCode）" class="headerlink" title="637. 二叉树的层平均值 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/description/?envType=study-plan-v2&envId=top-interview-150">637. 二叉树的层平均值 - 力扣（LeetCode）</a></h3><p>层序遍历每层相加取平均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();queue.add(root);</span><br><span class="line">        List&lt;Double&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.toArray().length,length = len;</span><br><span class="line">            <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len--)!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>) &#123;queue.add(treeNode.left);&#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>) &#123;queue.add(treeNode.right);&#125;</span><br><span class="line">                sum+=treeNode.val;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(sum/length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="103-二叉树的锯齿形层序遍历-力扣（LeetCode）"><a href="#103-二叉树的锯齿形层序遍历-力扣（LeetCode）" class="headerlink" title="103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/?envType=study-plan-v2&envId=top-interview-150">103. 二叉树的锯齿形层序遍历 - 力扣（LeetCode）</a></h3><p>设个flag,flag&#x3D;-1时从左往右,flag&#x3D;1时从右往左,每遍历一层flag&#x3D;-flag,用<strong>栈</strong>而不是队列存储每层节点就能解决节点顺序问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">zigzagLevelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        Stack&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();queue.add(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.toArray().length;</span><br><span class="line">            Stack&lt;TreeNode&gt; queue1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;TreeNode&gt;();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">while</span>((len--)!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> queue.pop();</span><br><span class="line">                list.add(treeNode.val);</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>)&#123;queue1.push(treeNode.left);&#125;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>)&#123;queue1.push(treeNode.right);&#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>)&#123;queue1.push(treeNode.right);&#125;</span><br><span class="line">                    <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>)&#123;queue1.push(treeNode.left);&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            queue = queue1;</span><br><span class="line">            Collections.reverse(list);</span><br><span class="line">            ans.add(list);</span><br><span class="line">            flag*=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="112-路径总和-力扣（LeetCode）"><a href="#112-路径总和-力扣（LeetCode）" class="headerlink" title="112. 路径总和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/path-sum/?envType=study-plan-v2&envId=top-interview-150">112. 路径总和 - 力扣（LeetCode）</a></h3><p>另写一函数遍历节点,参数传根节点到当前节点的sum,如果是叶子节点返回sum&#x3D;&#x3D;targetSum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">targetSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sumTree</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right==<span class="literal">null</span>) <span class="keyword">return</span> sum+root.val==targetSum;</span><br><span class="line">        sum+=root.val;</span><br><span class="line">        <span class="type">boolean</span> Fleft=<span class="literal">false</span>,Fright=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) Fleft = sumTree(root.left, sum);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) Fright = sumTree(root.right, sum);</span><br><span class="line">        <span class="keyword">return</span> Fleft||Fright;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.targetSum = targetSum;</span><br><span class="line">        <span class="keyword">return</span> sumTree(root,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/?envType=study-plan-v2&envId=top-interview-150">114. 二叉树展开为链表 - 力扣（LeetCode）</a></p><p>利用了前序遍历找到节点后左节点改变不影响后续遍历的特点,找完之后翻转一下整棵树的左右子树:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(-<span class="number">1</span>),p=head;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">fun</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        p.left = root;</span><br><span class="line">        p=p.left;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) fun(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) fun(root.right);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanNode</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cleanNode(root.left);</span><br><span class="line">            root.right=root.left;</span><br><span class="line">            root.left=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        fun(root);</span><br><span class="line">        cleanNode(head);</span><br><span class="line">        root=head.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种解法是将左右子树展开后拼接,讲道理拼接的算法要更好一点,可惜我没想到: <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/solutions/218689/114-er-cha-shu-zhan-kai-wei-lian-biao-by-ming-zhi-">114. 二叉树展开为链表</a></p><h2 id="6-30"><a href="#6-30" class="headerlink" title="6.30"></a>6.30</h2><h3 id="173-二叉搜索树迭代器-力扣（LeetCode）"><a href="#173-二叉搜索树迭代器-力扣（LeetCode）" class="headerlink" title="173. 二叉搜索树迭代器 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/binary-search-tree-iterator/submissions/543012941/?envType=study-plan-v2&envId=top-interview-150">173. 二叉搜索树迭代器 - 力扣（LeetCode）</a></h3><p>很容易想到的是先遍历得到中序遍历存储起来,然后一个个访问,不过空间复杂度是O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTIterator</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        InOrderTraverse(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InOrderTraverse</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        InOrderTraverse(root.left);</span><br><span class="line">        queue.add(root.val);</span><br><span class="line">        InOrderTraverse(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不容易想到的解法是维护一个栈使其存储根节点到当前节点的一条链,空间复杂度为O(H), H为树的高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;();</span><br><span class="line">    TreeNode cur;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTIterator</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        cur = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=stack.pop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> cur.val;</span><br><span class="line">        cur=cur.right;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cur!=<span class="literal">null</span>||!stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="117-填充每个节点的下一个右侧节点指针-II-力扣（LeetCode）"><a href="#117-填充每个节点的下一个右侧节点指针-II-力扣（LeetCode）" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/?envType=study-plan-v2&envId=top-interview-150">117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）</a></h3><p>容易想到的是层次遍历挨个连接节点,空间复杂度O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;<span class="keyword">return</span> root;&#125;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentLevelSize</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= currentLevelSize; ++i) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;queue.offer(node.left);&#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;queue.offer(node.right);&#125;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">1</span>)&#123;</span><br><span class="line">                    last.next=node;</span><br><span class="line">                &#125;last=node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不容易想到的是利用每一层的头节点用next遍历每层,因为next实际上已经为我们将每层连接成链表了,所以不用额外空间,空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            Node nextHead=<span class="keyword">new</span> <span class="title class_">Node</span>(),temp=nextHead;</span><br><span class="line">            <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(head.left!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    temp.next = head.left;temp=temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(head.right!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    temp.next = head.right;temp=temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = nextHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="129-求根节点到叶节点数字之和-力扣（LeetCode）"><a href="#129-求根节点到叶节点数字之和-力扣（LeetCode）" class="headerlink" title="129. 求根节点到叶节点数字之和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/sum-root-to-leaf-numbers/submissions/543029596/?envType=study-plan-v2&envId=top-interview-150">129. 求根节点到叶节点数字之和 - 力扣（LeetCode）</a></h3><p>没啥好说的, 遍历然后按规则加, 唯一的难点可能在于想到另写一个参数不同的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sumLeaf</span><span class="params">(TreeNode root,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        sum=<span class="number">10</span>*sum+ root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right==<span class="literal">null</span>) &#123;</span><br><span class="line">            ans+=sum;<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sumLeaf(root.left,sum);</span><br><span class="line">        sumLeaf(root.right,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumNumbers</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        sumLeaf(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="236-二叉树的最近公共祖先-力扣（LeetCode）"><a href="#236-二叉树的最近公共祖先-力扣（LeetCode）" class="headerlink" title="236. 二叉树的最近公共祖先 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/?envType=study-plan-v2&envId=top-interview-150">236. 二叉树的最近公共祖先 - 力扣（LeetCode）</a></h3><p>重写了一个函数递归看左右子树和节点本身有没有符合的值,有一个就返回true,有两个就找到ans然后不用找了,因为题目保证节点值不同且一定存在答案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> p,q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfsFind</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> left=dfsFind(root.left),right = dfsFind(root.right);</span><br><span class="line">        <span class="keyword">if</span>(((root.val==q||root.val==p)&amp;&amp;(left||right))||(left&amp;&amp;right))&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans==<span class="literal">null</span>) ans = root;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.val == q || root.val == p || left || right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.q=q.val;<span class="built_in">this</span>.p=p.val;</span><br><span class="line">        dfsFind(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个写得实在不够优雅,看题解找到一个相同思路且代码简洁优雅的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="literal">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="222-完全二叉树的节点个数-力扣（LeetCode）"><a href="#222-完全二叉树的节点个数-力扣（LeetCode）" class="headerlink" title="222. 完全二叉树的节点个数 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/?envType=study-plan-v2&envId=top-interview-150">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></h3><p>简单写法就直接遍历得到节点个数,这样时间复杂度是O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进阶我想到检查到空缺的叶子节点后剩下的就不用遍历了,这样时间复杂度最好情况是O(H),最坏是O(N); 二分法查找加位运算平均是O(logN*logN), 不过写起来真的很麻烦,我没想到 懒得写了,搬一下题解吧:<a href="https://leetcode.cn/problems/count-complete-tree-nodes/solutions/1/chang-gui-jie-fa-he-ji-bai-100de-javajie-fa-by-xia/?envType=study-plan-v2&envId=top-interview-150">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel部署Meting-API并添加网易云cookie</title>
      <link href="/2024/06/21/%E8%87%AA%E5%BB%BAMetingJS-API%E5%B9%B6%E6%B7%BB%E5%8A%A0cookie/"/>
      <url>/2024/06/21/%E8%87%AA%E5%BB%BAMetingJS-API%E5%B9%B6%E6%B7%BB%E5%8A%A0cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前排提醒:<strong>绑定cookie可能会有未知风险</strong></p><p>前排再次提醒:<strong>网易云音乐cookie可能会过期,更换新的cookie就好</strong></p><p>anzhiyu主题自带的音乐馆使用了metingJs插件来提供音乐播放器的功能, 但是metingJs默认提供的API有抽风&#x2F;下线&#x2F;跑路的风险, 而且最重要的是: 听不了VIP歌曲</p><p><img src="https://pic.joking7.com/2024-06-27-19-17-42" alt="2024-06-27-19-17-42"></p><p>部署自建metingJs-api并添加有VIP权限的账号的cookie就能解决上面的问题</p><h2 id="1-Vercel部署MetingAPI"><a href="#1-Vercel部署MetingAPI" class="headerlink" title="1 Vercel部署MetingAPI"></a>1 Vercel部署MetingAPI</h2><p>首先点击下方链接去Vercel部署项目:</p><p><a href="https://vercel.com/new/clone?s=https://github.com/xizeyoupan/Meting-API&showOptionalTeamCreation=false">Vercel部署Meting</a></p><p>填好名字后点击Create创建项目:</p><p><img src="https://pic.joking7.com/2024-06-27-18-08-31" alt="2024-06-27-18-08-31"></p><p>之后点击Add Domain查看接口url,注意Vercel在国内被墙了,想要在国内访问的话需要绑定自己的域名:</p><p><img src="https://pic.joking7.com/2024-06-27-18-13-41" alt="2024-06-27-18-13-41"></p><p>到此Vercel部署MetingAPI已成功</p><h2 id="2-获取网易云音乐账号cookie"><a href="#2-获取网易云音乐账号cookie" class="headerlink" title="2 获取网易云音乐账号cookie"></a>2 获取网易云音乐账号cookie</h2><p>注意:<strong>cookie就是你的账号,所以不要泄露出去</strong></p><p>登录网易云网页版并随便点进一首歌,按F12后找到下面的Cookie:</p><p><img src="https://pic.joking7.com/2024-06-27-19-00-17" alt="2024-06-27-19-00-17"></p><p>将cookie字段的字符串全部复制备用(这里我不知道哪些是要用到的字段所以就全部复制了,如果你知道可以只复制指定的字段)</p><h2 id="3-添加网易云cookie"><a href="#3-添加网易云cookie" class="headerlink" title="3 添加网易云cookie"></a>3 添加网易云cookie</h2><p>之前Vercel部署MetingAPI的时候自动往你的Github下创建了一个同名项目,找到上面创建的Github项目下的src&#x2F;providers&#x2F;netease&#x2F;util.js文件</p><p><img src="https://pic.joking7.com/2024-06-27-18-28-39" alt="2024-06-27-18-28-39"></p><p>替换成下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> encrypt <span class="keyword">from</span> <span class="string">&#x27;./crypto.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; net_ease_anonymous_token &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; customAlphabet &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid/non-secure&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nanoid = <span class="title function_">customAlphabet</span>(<span class="string">&#x27;1234567890abcdef&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cookie字符串</span></span><br><span class="line"><span class="keyword">const</span> customCookieString = <span class="string">`</span></span><br><span class="line"><span class="string">这里填你的网易云cookie</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将cookie字符串转换为对象</span></span><br><span class="line"><span class="keyword">const</span> customCookieObject = customCookieString.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cookie</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [key, ...rest] = cookie.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    acc[key] = rest.<span class="title function_">join</span>(<span class="string">&#x27;=&#x27;</span>); <span class="comment">// 处理值中包含等号的情况</span></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">chooseUserAgent</span> = (<span class="params">ua = <span class="literal">false</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> userAgentList = &#123;</span><br><span class="line">        <span class="attr">mobile</span>: [</span><br><span class="line">            <span class="comment">// iOS 13.5.1 14.0 beta with safari</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Mobile/15E148 Safari/604.1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.&#x27;</span>,</span><br><span class="line">            <span class="comment">// iOS with qq micromsg</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/602.1.50 (KHTML like Gecko) Mobile/14A456 QQ/6.5.7.408 V1_IPH_SQ_6.5.7_1_APP_A Pixel/750 Core/UIWebView NetType/4G Mem/103&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/7.0.15(0x17000f27) NetType/WIFI Language/zh&#x27;</span>,</span><br><span class="line">            <span class="comment">// Android -&gt; Huawei Xiaomi</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; Android 9; PCT-AL10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.64 HuaweiBrowser/10.0.3.311 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 9; zh-cn; Redmi Note 8 Build/PKQ1.190616.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.141 Mobile Safari/537.36 XiaoMi/MiuiBrowser/12.5.22&#x27;</span>,</span><br><span class="line">            <span class="comment">// Android + qq micromsg</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; Android 10; YAL-AL00 Build/HUAWEIYAL-AL00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/78.0.3904.62 XWEB/2581 MMWEBSDK/200801 Mobile Safari/537.36 MMWEBID/3027 MicroMessenger/7.0.18.1740(0x27001235) Process/toolsmp WeChat/arm64 NetType/WIFI Language/zh_CN ABI/arm64&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-cn; BKK-AL10 Build/HONORBKK-AL10) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/10.6 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">pc</span>: [</span><br><span class="line">            <span class="comment">// macOS 10.15.6  Firefox / Chrome / Safari</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:80.0) Gecko/20100101 Firefox/80.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.30 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.2 Safari/605.1.15&#x27;</span>,</span><br><span class="line">            <span class="comment">// Windows 10 Firefox / Chrome / Edge</span></span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.30 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586&#x27;</span>,</span><br><span class="line">            <span class="comment">// Linux 就算了</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> realUserAgentList =</span><br><span class="line">        userAgentList[ua] || userAgentList.<span class="property">mobile</span>.<span class="title function_">concat</span>(userAgentList.<span class="property">pc</span>)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;pc&#x27;</span>, <span class="literal">false</span>].<span class="title function_">indexOf</span>(ua) &gt; -<span class="number">1</span></span><br><span class="line">        ? realUserAgentList[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * realUserAgentList.<span class="property">length</span>)]</span><br><span class="line">        : ua</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cnip</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//国内城市IP段</span></span><br><span class="line">    <span class="keyword">const</span> ips = <span class="string">&#x27;58.14.0.0,58.16.0.0,58.24.0.0,58.30.0.0,58.32.0.0,58.66.0.0,58.68.128.0,58.82.0.0,58.87.64.0,58.99.128.0,58.100.0.0,58.116.0.0,58.128.0.0,58.144.0.0,58.154.0.0,58.192.0.0,58.240.0.0,59.32.0.0,59.64.0.0,59.80.0.0,59.107.0.0,59.108.0.0,59.151.0.0,59.155.0.0,59.172.0.0,59.191.0.0,59.191.240.0,59.192.0.0,60.0.0.0,60.55.0.0,60.63.0.0,60.160.0.0,60.194.0.0,60.200.0.0,60.208.0.0,60.232.0.0,60.235.0.0,60.245.128.0,60.247.0.0,60.252.0.0,60.253.128.0,60.255.0.0,61.4.80.0,61.4.176.0,61.8.160.0,61.28.0.0,61.29.128.0,61.45.128.0,61.47.128.0,61.48.0.0,61.87.192.0,61.128.0.0,61.232.0.0,61.236.0.0,61.240.0.0,114.28.0.0,114.54.0.0,114.60.0.0,114.64.0.0,114.68.0.0,114.80.0.0,116.1.0.0,116.2.0.0,116.4.0.0,116.8.0.0,116.13.0.0,116.16.0.0,116.52.0.0,116.56.0.0,116.58.128.0,116.58.208.0,116.60.0.0,116.66.0.0,116.69.0.0,116.70.0.0,116.76.0.0,116.89.144.0,116.90.184.0,116.95.0.0,116.112.0.0,116.116.0.0,116.128.0.0,116.192.0.0,116.193.16.0,116.193.32.0,116.194.0.0,116.196.0.0,116.198.0.0,116.199.0.0,116.199.128.0,116.204.0.0,116.207.0.0,116.208.0.0,116.212.160.0,116.213.64.0,116.213.128.0,116.214.32.0,116.214.64.0,116.214.128.0,116.215.0.0,116.216.0.0,116.224.0.0,116.242.0.0,116.244.0.0,116.248.0.0,116.252.0.0,116.254.128.0,116.255.128.0,117.8.0.0,117.21.0.0,117.22.0.0,117.24.0.0,117.32.0.0,117.40.0.0,117.44.0.0,117.48.0.0,117.53.48.0,117.53.176.0,117.57.0.0,117.58.0.0,117.59.0.0,117.60.0.0,117.64.0.0,117.72.0.0,117.74.64.0,117.74.128.0,117.75.0.0,117.76.0.0,117.80.0.0,117.100.0.0,117.103.16.0,117.103.128.0,117.106.0.0,117.112.0.0,117.120.64.0,117.120.128.0,117.121.0.0,117.121.128.0,117.121.192.0,117.122.128.0,117.124.0.0,117.128.0.0,118.24.0.0,118.64.0.0,118.66.0.0,118.67.112.0,118.72.0.0,118.80.0.0,118.84.0.0,118.88.32.0,118.88.64.0,118.88.128.0,118.89.0.0,118.91.240.0,118.102.16.0,118.112.0.0,118.120.0.0,118.124.0.0,118.126.0.0,118.132.0.0,118.144.0.0,118.178.0.0,118.180.0.0,118.184.0.0,118.192.0.0,118.212.0.0,118.224.0.0,118.228.0.0,118.230.0.0,118.239.0.0,118.242.0.0,118.244.0.0,118.248.0.0,119.0.0.0,119.2.0.0,119.2.128.0,119.3.0.0,119.4.0.0,119.8.0.0,119.10.0.0,119.15.136.0,119.16.0.0,119.18.192.0,119.18.208.0,119.18.224.0,119.19.0.0,119.20.0.0,119.27.64.0,119.27.160.0,119.27.192.0,119.28.0.0,119.30.48.0,119.31.192.0,119.32.0.0,119.40.0.0,119.40.64.0,119.40.128.0,119.41.0.0,119.42.0.0,119.42.136.0,119.42.224.0,119.44.0.0,119.48.0.0,119.57.0.0,119.58.0.0,119.59.128.0,119.60.0.0,119.62.0.0,119.63.32.0,119.75.208.0,119.78.0.0,119.80.0.0,119.84.0.0,119.88.0.0,119.96.0.0,119.108.0.0,119.112.0.0,119.128.0.0,119.144.0.0,119.148.160.0,119.161.128.0,119.162.0.0,119.164.0.0,119.176.0.0,119.232.0.0,119.235.128.0,119.248.0.0,119.253.0.0,119.254.0.0,120.0.0.0,120.24.0.0,120.30.0.0,120.32.0.0,120.48.0.0,120.52.0.0,120.64.0.0,120.72.32.0,120.72.128.0,120.76.0.0,120.80.0.0,120.90.0.0,120.92.0.0,120.94.0.0,120.128.0.0,120.136.128.0,120.137.0.0,120.192.0.0,121.0.16.0,121.4.0.0,121.8.0.0,121.16.0.0,121.32.0.0,121.40.0.0,121.46.0.0,121.48.0.0,121.51.0.0,121.52.160.0,121.52.208.0,121.52.224.0,121.55.0.0,121.56.0.0,121.58.0.0,121.58.144.0,121.59.0.0,121.60.0.0,121.68.0.0,121.76.0.0,121.79.128.0,121.89.0.0,121.100.128.0,121.101.208.0,121.192.0.0,121.201.0.0,121.204.0.0,121.224.0.0,121.248.0.0,121.255.0.0,122.0.64.0,122.0.128.0,122.4.0.0,122.8.0.0,122.48.0.0,122.49.0.0,122.51.0.0,122.64.0.0,122.96.0.0,122.102.0.0,122.102.64.0,122.112.0.0,122.119.0.0,122.136.0.0,122.144.128.0,122.152.192.0,122.156.0.0,122.192.0.0,122.198.0.0,122.200.64.0,122.204.0.0,122.224.0.0,122.240.0.0,122.248.48.0,123.0.128.0,123.4.0.0,123.8.0.0,123.49.128.0,123.52.0.0,123.56.0.0,123.64.0.0,123.96.0.0,123.98.0.0,123.99.128.0,123.100.0.0,123.101.0.0,123.103.0.0,123.108.128.0,123.108.208.0,123.112.0.0,123.128.0.0,123.136.80.0,123.137.0.0,123.138.0.0,123.144.0.0,123.160.0.0,123.176.80.0,123.177.0.0,123.178.0.0,123.180.0.0,123.184.0.0,123.196.0.0,123.199.128.0,123.206.0.0,123.232.0.0,123.242.0.0,123.244.0.0,123.249.0.0,123.253.0.0,124.6.64.0,124.14.0.0,124.16.0.0,124.20.0.0,124.28.192.0,124.29.0.0,124.31.0.0,124.40.112.0,124.40.128.0,124.42.0.0,124.47.0.0,124.64.0.0,124.66.0.0,124.67.0.0,124.68.0.0,124.72.0.0,124.88.0.0,124.108.8.0,124.108.40.0,124.112.0.0,124.126.0.0,124.128.0.0,124.147.128.0,124.156.0.0,124.160.0.0,124.172.0.0,124.192.0.0,124.196.0.0,124.200.0.0,124.220.0.0,124.224.0.0,124.240.0.0,124.240.128.0,124.242.0.0,124.243.192.0,124.248.0.0,124.249.0.0,124.250.0.0,124.254.0.0,125.31.192.0,125.32.0.0,125.58.128.0,125.61.128.0,125.62.0.0,125.64.0.0,125.96.0.0,125.98.0.0,125.104.0.0,125.112.0.0,125.169.0.0,125.171.0.0,125.208.0.0,125.210.0.0,125.213.0.0,125.214.96.0,125.215.0.0,125.216.0.0,125.254.128.0,134.196.0.0,159.226.0.0,161.207.0.0,162.105.0.0,166.111.0.0,167.139.0.0,168.160.0.0,169.211.1.0,192.83.122.0,192.83.169.0,192.124.154.0,192.188.170.0,198.17.7.0,202.0.110.0,202.0.176.0,202.4.128.0,202.4.252.0,202.8.128.0,202.10.64.0,202.14.88.0,202.14.235.0,202.14.236.0,202.14.238.0,202.20.120.0,202.22.248.0,202.38.0.0,202.38.64.0,202.38.128.0,202.38.136.0,202.38.138.0,202.38.140.0,202.38.146.0,202.38.149.0,202.38.150.0,202.38.152.0,202.38.156.0,202.38.158.0,202.38.160.0,202.38.164.0,202.38.168.0,202.38.176.0,202.38.184.0,202.38.192.0,202.41.152.0,202.41.240.0,202.43.144.0,202.46.32.0,202.46.224.0,202.60.112.0,202.63.248.0,202.69.4.0,202.69.16.0,202.70.0.0,202.74.8.0,202.75.208.0,202.85.208.0,202.90.0.0,202.90.224.0,202.90.252.0,202.91.0.0,202.91.128.0,202.91.176.0,202.91.224.0,202.92.0.0,202.92.252.0,202.93.0.0,202.93.252.0,202.95.0.0,202.95.252.0,202.96.0.0,202.112.0.0,202.120.0.0,202.122.0.0,202.122.32.0,202.122.64.0,202.122.112.0,202.122.128.0,202.123.96.0,202.124.24.0,202.125.176.0,202.127.0.0,202.127.12.0,202.127.16.0,202.127.40.0,202.127.48.0,202.127.112.0,202.127.128.0,202.127.160.0,202.127.192.0,202.127.208.0,202.127.212.0,202.127.216.0,202.127.224.0,202.130.0.0,202.130.224.0,202.131.16.0,202.131.48.0,202.131.208.0,202.136.48.0,202.136.208.0,202.136.224.0,202.141.160.0,202.142.16.0,202.143.16.0,202.148.96.0,202.149.160.0,202.149.224.0,202.150.16.0,202.152.176.0,202.153.48.0,202.158.160.0,202.160.176.0,202.164.0.0,202.164.25.0,202.165.96.0,202.165.176.0,202.165.208.0,202.168.160.0,202.170.128.0,202.170.216.0,202.173.8.0,202.173.224.0,202.179.240.0,202.180.128.0,202.181.112.0,202.189.80.0,202.192.0.0,203.18.50.0,203.79.0.0,203.80.144.0,203.81.16.0,203.83.56.0,203.86.0.0,203.86.64.0,203.88.32.0,203.88.192.0,203.89.0.0,203.90.0.0,203.90.128.0,203.90.192.0,203.91.32.0,203.91.96.0,203.91.120.0,203.92.0.0,203.92.160.0,203.93.0.0,203.94.0.0,203.95.0.0,203.95.96.0,203.99.16.0,203.99.80.0,203.100.32.0,203.100.80.0,203.100.96.0,203.100.192.0,203.110.160.0,203.118.192.0,203.119.24.0,203.119.32.0,203.128.32.0,203.128.96.0,203.130.32.0,203.132.32.0,203.134.240.0,203.135.96.0,203.135.160.0,203.142.219.0,203.148.0.0,203.152.64.0,203.156.192.0,203.158.16.0,203.161.192.0,203.166.160.0,203.171.224.0,203.174.7.0,203.174.96.0,203.175.128.0,203.175.192.0,203.176.168.0,203.184.80.0,203.187.160.0,203.190.96.0,203.191.16.0,203.191.64.0,203.191.144.0,203.192.0.0,203.196.0.0,203.207.64.0,203.207.128.0,203.208.0.0,203.208.16.0,203.208.32.0,203.209.224.0,203.212.0.0,203.212.80.0,203.222.192.0,203.223.0.0,210.2.0.0,210.5.0.0,210.5.144.0,210.12.0.0,210.14.64.0,210.14.112.0,210.14.128.0,210.15.0.0,210.15.128.0,210.16.128.0,210.21.0.0,210.22.0.0,210.23.32.0,210.25.0.0,210.26.0.0,210.28.0.0,210.32.0.0,210.51.0.0,210.52.0.0,210.56.192.0,210.72.0.0,210.76.0.0,210.78.0.0,210.79.64.0,210.79.224.0,210.82.0.0,210.87.128.0,210.185.192.0,210.192.96.0,211.64.0.0,211.80.0.0,211.96.0.0,211.136.0.0,211.144.0.0,211.160.0.0,218.0.0.0,218.56.0.0,218.64.0.0,218.96.0.0,218.104.0.0,218.108.0.0,218.185.192.0,218.192.0.0,218.240.0.0,218.249.0.0,219.72.0.0,219.82.0.0,219.128.0.0,219.216.0.0,219.224.0.0,219.242.0.0,219.244.0.0,220.101.192.0,220.112.0.0,220.152.128.0,220.154.0.0,220.160.0.0,220.192.0.0,220.231.0.0,220.231.128.0,220.232.64.0,220.234.0.0,220.242.0.0,220.248.0.0,220.252.0.0,221.0.0.0,221.8.0.0,221.12.0.0,221.12.128.0,221.13.0.0,221.14.0.0,221.122.0.0,221.129.0.0,221.130.0.0,221.133.224.0,221.136.0.0,221.172.0.0,221.176.0.0,221.192.0.0,221.196.0.0,221.198.0.0,221.199.0.0,221.199.128.0,221.199.192.0,221.199.224.0,221.200.0.0,221.208.0.0,221.224.0.0,222.16.0.0,222.32.0.0,222.64.0.0,222.125.0.0,222.126.128.0,222.128.0.0,222.160.0.0,222.168.0.0,222.176.0.0,222.192.0.0,222.240.0.0,222.248.0.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> arr = ips.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> rnd = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * ((arr.<span class="property">length</span> - <span class="number">1</span>) - <span class="number">0</span> + <span class="number">1</span>) + <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> ip = arr[rnd];</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = <span class="keyword">async</span> (<span class="params">method, url, data = &#123;&#125;, options</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保options.cookie是一个对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">cookie</span> === <span class="string">&#x27;undefined&#x27;</span> || options.<span class="property">cookie</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        options.<span class="property">cookie</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并自定义cookie和用户定义的cookie（如果有）</span></span><br><span class="line">    options.<span class="property">cookie</span> = &#123;</span><br><span class="line">        ...customCookieObject,</span><br><span class="line">        ...options.<span class="property">cookie</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> headers = &#123; <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">chooseUserAgent</span>(options.<span class="property">ua</span>) &#125;</span><br><span class="line">    <span class="keyword">if</span> (method.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">        headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">includes</span>(<span class="string">&#x27;music.163.com&#x27;</span>))</span><br><span class="line">        headers[<span class="string">&#x27;Referer&#x27;</span>] = <span class="string">&#x27;https://music.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ip = <span class="title function_">cnip</span>() || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(ip)</span></span><br><span class="line">    <span class="keyword">if</span> (ip) &#123;</span><br><span class="line">        headers[<span class="string">&#x27;X-Real-IP&#x27;</span>] = ip</span><br><span class="line">        headers[<span class="string">&#x27;X-Forwarded-For&#x27;</span>] = ip</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// headers[&#x27;X-Real-IP&#x27;] = &#x27;118.88.88.88&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">cookie</span> === <span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">        options.<span class="property">cookie</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">cookie</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        options.<span class="property">cookie</span> = &#123;</span><br><span class="line">            ...options.<span class="property">cookie</span>,</span><br><span class="line">            <span class="attr">__remember_me</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// NMTID: nanoid(),</span></span><br><span class="line">            <span class="attr">_ntes_nuid</span>: <span class="title function_">nanoid</span>(),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">cookie</span>.<span class="property">MUSIC_U</span>) &#123;</span><br><span class="line">            <span class="comment">// 游客</span></span><br><span class="line">            <span class="keyword">if</span> (!options.<span class="property">cookie</span>.<span class="property">MUSIC_A</span>) &#123;</span><br><span class="line">                options.<span class="property">cookie</span>.<span class="property">MUSIC_A</span> = net_ease_anonymous_token</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="title class_">Object</span>.<span class="title function_">keys</span>(options.<span class="property">cookie</span>)</span><br><span class="line">            .<span class="title function_">map</span>(</span><br><span class="line">                <span class="function">(<span class="params">key</span>) =&gt;</span></span><br><span class="line">                    <span class="built_in">encodeURIComponent</span>(key) +</span><br><span class="line">                    <span class="string">&#x27;=&#x27;</span> +</span><br><span class="line">                    <span class="built_in">encodeURIComponent</span>(options.<span class="property">cookie</span>[key]),</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">cookie</span>) &#123;</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = options.<span class="property">cookie</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="string">&#x27;__remember_me=true; NMTID=xxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(options.cookie, headers[&#x27;Cookie&#x27;])</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;weapi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> csrfToken = (headers[<span class="string">&#x27;Cookie&#x27;</span>] || <span class="string">&#x27;&#x27;</span>).<span class="title function_">match</span>(<span class="regexp">/_csrf=([^(;|$)]+)/</span>)</span><br><span class="line">        data.<span class="property">csrf_token</span> = csrfToken ? csrfToken[<span class="number">1</span>] : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        data = encrypt.<span class="title function_">weapi</span>(data)</span><br><span class="line">        url = url.<span class="title function_">replace</span>(<span class="regexp">/\w*api/</span>, <span class="string">&#x27;weapi&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;linuxapi&#x27;</span>) &#123;</span><br><span class="line">        data = encrypt.<span class="title function_">linuxapi</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>: method,</span><br><span class="line">            <span class="attr">url</span>: url.<span class="title function_">replace</span>(<span class="regexp">/\w*api/</span>, <span class="string">&#x27;api&#x27;</span>),</span><br><span class="line">            <span class="attr">params</span>: data,</span><br><span class="line">        &#125;)</span><br><span class="line">        headers[<span class="string">&#x27;User-Agent&#x27;</span>] =</span><br><span class="line">            <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36&#x27;</span></span><br><span class="line">        url = <span class="string">&#x27;https://music.163.com/api/linux/forward&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;eapi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cookie = options.<span class="property">cookie</span> || &#123;&#125;</span><br><span class="line">        <span class="keyword">const</span> csrfToken = cookie[<span class="string">&#x27;__csrf&#x27;</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> header = &#123;</span><br><span class="line">            <span class="attr">osver</span>: cookie.<span class="property">osver</span>, <span class="comment">//系统版本</span></span><br><span class="line">            <span class="attr">deviceId</span>: cookie.<span class="property">deviceId</span>, <span class="comment">//encrypt.base64.encode(imei + &#x27;\t02:00:00:00:00:00\t5106025eb79a5247\t70ffbaac7&#x27;)</span></span><br><span class="line">            <span class="attr">appver</span>: cookie.<span class="property">appver</span> || <span class="string">&#x27;8.7.01&#x27;</span>, <span class="comment">// app版本</span></span><br><span class="line">            <span class="attr">versioncode</span>: cookie.<span class="property">versioncode</span> || <span class="string">&#x27;140&#x27;</span>, <span class="comment">//版本号</span></span><br><span class="line">            <span class="attr">mobilename</span>: cookie.<span class="property">mobilename</span>, <span class="comment">//设备model</span></span><br><span class="line">            <span class="attr">buildver</span>: cookie.<span class="property">buildver</span> || <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">            <span class="attr">resolution</span>: cookie.<span class="property">resolution</span> || <span class="string">&#x27;1920x1080&#x27;</span>, <span class="comment">//设备分辨率</span></span><br><span class="line">            <span class="attr">__csrf</span>: csrfToken,</span><br><span class="line">            <span class="attr">os</span>: cookie.<span class="property">os</span> || <span class="string">&#x27;android&#x27;</span>,</span><br><span class="line">            <span class="attr">channel</span>: cookie.<span class="property">channel</span>,</span><br><span class="line">            <span class="attr">requestId</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">                .toString()</span></span></span><br><span class="line"><span class="subst"><span class="string">                .padStart(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">                &#125;</span> `</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cookie.<span class="property">MUSIC_U</span>) header[<span class="string">&#x27;MUSIC_U&#x27;</span>] = cookie.<span class="property">MUSIC_U</span></span><br><span class="line">        <span class="keyword">if</span> (cookie.<span class="property">MUSIC_A</span>) header[<span class="string">&#x27;MUSIC_A&#x27;</span>] = cookie.<span class="property">MUSIC_A</span></span><br><span class="line">        headers[<span class="string">&#x27;Cookie&#x27;</span>] = <span class="title class_">Object</span>.<span class="title function_">keys</span>(header)</span><br><span class="line">            .<span class="title function_">map</span>(</span><br><span class="line">                <span class="function">(<span class="params">key</span>) =&gt;</span></span><br><span class="line">                    <span class="built_in">encodeURIComponent</span>(key) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(header[key]),</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_">join</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">        data.<span class="property">header</span> = header</span><br><span class="line">        data = encrypt.<span class="title function_">eapi</span>(options.<span class="property">url</span>, data)</span><br><span class="line">        url = url.<span class="title function_">replace</span>(<span class="regexp">/\w*api/</span>, <span class="string">&#x27;eapi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> settings = &#123;</span><br><span class="line">        method,</span><br><span class="line">        headers,</span><br><span class="line">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(data).<span class="title function_">toString</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;eapi&#x27;</span>) &#123;</span><br><span class="line">        settings = &#123;</span><br><span class="line">            ...settings,</span><br><span class="line">            <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res, count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, settings)</span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">crypto</span> === <span class="string">&#x27;eapi&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> _ = <span class="keyword">await</span> res.<span class="title function_">arrayBuffer</span>(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> enc = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>()</span><br><span class="line">            res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(enc.<span class="title function_">decode</span>(_))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request <span class="subst">$&#123;count&#125;</span> times.`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Max retries exceeded.`</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>))</span><br><span class="line">    &#125; <span class="keyword">while</span> (res.<span class="property">code</span> == -<span class="number">460</span>)  <span class="comment">// &#123; code: -460, message: &#x27;网络太拥挤，请稍候再试！&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">map_song_list</span> = (<span class="params">song_list</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> song_list.<span class="property">songs</span>.<span class="title function_">map</span>(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> artists = song.<span class="property">ar</span> || song.<span class="property">artists</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: song.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">author</span>: artists.<span class="title function_">reduce</span>(<span class="function">(<span class="params">i, v</span>) =&gt;</span> ((i ? i + <span class="string">&quot; / &quot;</span> : i) + v.<span class="property">name</span>), <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            <span class="attr">pic</span>: song?.<span class="property">al</span>?.<span class="property">picUrl</span> || song.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">url</span>: song.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">lrc</span>: song.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将之前得到的网易云cookie替换到上面代码中的customCookieString,提交,访问之前Vercel项目url,查看是否可以访问歌曲,可以就成功了</p><h2 id="4-Hexo-Butterfly主题使用自建API"><a href="#4-Hexo-Butterfly主题使用自建API" class="headerlink" title="4 Hexo Butterfly主题使用自建API"></a>4 Hexo Butterfly主题使用自建API</h2><p>配置前确保安装并启用了APlayer插件</p><p>修改_config.butterfly.yml配置文件,填入你的Vercel项目api:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CDN</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work</span></span><br><span class="line"><span class="comment"># 非必要請不要修改</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="attr">meting_api:</span> <span class="string">&#x27;https://（你的Vercel项目api地址）/api/?server=:server&amp;type=:type&amp;id=:id&amp;auth=:auth&amp;r=:r&#x27;</span><span class="string">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然你要是也用anzhiyu主题的话使用方法也和上面一样</p><h2 id="5-效果展示"><a href="#5-效果展示" class="headerlink" title="5 效果展示"></a>5 效果展示</h2><p><img src="https://pic.joking7.com/2024-06-27-19-17-12" alt="2024-06-27-19-17-12"></p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.sinzmise.top/posts/61417/">自建Meting服务 | 星空故事·魔法小屋 (sinzmise.top)</a></p><p><a href="https://blog.saop.cc/p/300/#%E5%BA%94%E7%94%A8%E4%BA%8E-hexo-%E7%9A%84-butterfly-%E4%B8%BB%E9%A2%98">部署Meting-API | 定の栈 (saop.cc)</a></p><p><a href="https://blog.anheyu.com/posts/a76e.html">♪(^∇^*)欢迎肥来！音乐meting自建api | 安知鱼 (anheyu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Vercel </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
